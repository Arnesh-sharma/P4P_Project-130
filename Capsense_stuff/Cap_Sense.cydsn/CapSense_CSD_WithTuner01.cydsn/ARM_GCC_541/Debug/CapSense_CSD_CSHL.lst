ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"CapSense_CSD_CSHL.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	CapSense_CSD_rawFilterData1,4,4
  20              		.comm	CapSense_CSD_rawFilterData2,4,4
  21              		.comm	CapSense_CSD_sensorBaseline,4,4
  22              		.comm	CapSense_CSD_sensorBaselineLow,2,4
  23              		.comm	CapSense_CSD_sensorSignal,4,4
  24              		.comm	CapSense_CSD_sensorOnMask,1,4
  25              		.comm	CapSense_CSD_lowBaselineResetCnt,2,4
  26              		.global	CapSense_CSD_fingerThreshold
  27              		.data
  28              		.align	2
  29              		.type	CapSense_CSD_fingerThreshold, %object
  30              		.size	CapSense_CSD_fingerThreshold, 4
  31              	CapSense_CSD_fingerThreshold:
  32 0000 6400     		.short	100
  33 0002 3200     		.short	50
  34              		.global	CapSense_CSD_noiseThreshold
  35              		.align	2
  36              		.type	CapSense_CSD_noiseThreshold, %object
  37              		.size	CapSense_CSD_noiseThreshold, 4
  38              	CapSense_CSD_noiseThreshold:
  39 0004 1400     		.short	20
  40 0006 1400     		.short	20
  41              		.global	CapSense_CSD_hysteresis
  42              		.align	2
  43              		.type	CapSense_CSD_hysteresis, %object
  44              		.size	CapSense_CSD_hysteresis, 4
  45              	CapSense_CSD_hysteresis:
  46 0008 0A00     		.short	10
  47 000a 0A00     		.short	10
  48              		.global	CapSense_CSD_debounce
  49              		.align	2
  50              		.type	CapSense_CSD_debounce, %object
  51              		.size	CapSense_CSD_debounce, 2
  52              	CapSense_CSD_debounce:
  53 000c 01       		.byte	1
  54 000d 05       		.byte	5
  55              		.global	CapSense_CSD_debounceCounter
  56              		.bss
  57              		.align	2
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 2


  58              		.type	CapSense_CSD_debounceCounter, %object
  59              		.size	CapSense_CSD_debounceCounter, 3
  60              	CapSense_CSD_debounceCounter:
  61 0000 000000   		.space	3
  62              		.global	CapSense_CSD_rawDataIndex
  63              		.section	.rodata
  64              		.align	2
  65              		.type	CapSense_CSD_rawDataIndex, %object
  66              		.size	CapSense_CSD_rawDataIndex, 2
  67              	CapSense_CSD_rawDataIndex:
  68 0000 00       		.byte	0
  69 0001 01       		.byte	1
  70              		.global	CapSense_CSD_numberOfSensors
  71 0002 0000     		.align	2
  72              		.type	CapSense_CSD_numberOfSensors, %object
  73              		.size	CapSense_CSD_numberOfSensors, 2
  74              	CapSense_CSD_numberOfSensors:
  75 0004 01       		.byte	1
  76 0005 01       		.byte	1
  77              		.section	.text.CapSense_CSD_BaseInit,"ax",%progbits
  78              		.align	2
  79              		.global	CapSense_CSD_BaseInit
  80              		.thumb
  81              		.thumb_func
  82              		.type	CapSense_CSD_BaseInit, %function
  83              	CapSense_CSD_BaseInit:
  84              	.LFB0:
  85              		.file 1 "Generated_Source\\PSoC5\\CapSense_CSD_CSHL.c"
   1:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** /*******************************************************************************
   2:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * File Name: CapSense_CSD_CSHL.c
   3:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Version 3.50
   4:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
   5:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Description:
   6:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  This file provides the source code to the High Level APIs for the CapSesne
   7:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  CSD component.
   8:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
   9:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Note:
  10:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
  11:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** ********************************************************************************
  12:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Copyright 2008-2013, Cypress Semiconductor Corporation.  All rights reserved.
  13:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * the software package with which this file was provided.
  16:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *******************************************************************************/
  17:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
  18:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** #include "CapSense_CSD_CSHL.h"
  19:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
  20:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** /* Storage of filters data */
  21:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** #if ( (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_MEDIAN_FILTER) | \
  22:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****       (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_AVERAGING_FILTER) )
  23:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
  24:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     uint16 CapSense_CSD_rawFilterData1[CapSense_CSD_TOTAL_SENSOR_COUNT];
  25:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     uint16 CapSense_CSD_rawFilterData2[CapSense_CSD_TOTAL_SENSOR_COUNT];
  26:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
  27:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** #elif ( (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_IIR2_FILTER)   | \
  28:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_IIR4_FILTER)   | \
  29:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_JITTER_FILTER) | \
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 3


  30:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_IIR8_FILTER)   | \
  31:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_IIR16_FILTER) )
  32:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         
  33:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     uint16 CapSense_CSD_rawFilterData1[CapSense_CSD_TOTAL_SENSOR_COUNT];
  34:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
  35:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** #else
  36:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     /* No Raw filters */
  37:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** #endif  /* ( (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_MEDIAN_FILTER) || \
  38:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         *    (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_AVERAGING_FILTER) )
  39:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         */
  40:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
  41:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** uint16 CapSense_CSD_sensorBaseline[CapSense_CSD_TOTAL_SENSOR_COUNT];
  42:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** uint8 CapSense_CSD_sensorBaselineLow[CapSense_CSD_TOTAL_SENSOR_COUNT];
  43:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** uint16 CapSense_CSD_sensorSignal[CapSense_CSD_TOTAL_SENSOR_COUNT];
  44:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** uint8 CapSense_CSD_sensorOnMask[(((CapSense_CSD_TOTAL_SENSOR_COUNT - 1u) / 8u) + 1u)];
  45:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
  46:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** uint8 CapSense_CSD_lowBaselineResetCnt[CapSense_CSD_TOTAL_SENSOR_COUNT];
  47:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
  48:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** uint16 CapSense_CSD_fingerThreshold[] = {
  49:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     100u, 50u, 
  50:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** };
  51:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
  52:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** uint16 CapSense_CSD_noiseThreshold[] = {
  53:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     20u, 20u, 
  54:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** };
  55:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
  56:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** uint16 CapSense_CSD_hysteresis[] = {
  57:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     10u, 10u, 
  58:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** };
  59:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
  60:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** uint8 CapSense_CSD_debounce[] = {
  61:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     1u, 5u, 
  62:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** };
  63:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
  64:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** uint8 CapSense_CSD_debounceCounter[] = {
  65:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     0u, 0u, 0u, 
  66:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** };
  67:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
  68:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** const uint8 CYCODE CapSense_CSD_rawDataIndex[] = {
  69:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     0u, /* Button0__BTN */
  70:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     1u, /* ProximitySensor0__PROX */
  71:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
  72:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** };
  73:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
  74:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** const uint8 CYCODE CapSense_CSD_numberOfSensors[] = {
  75:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     1u, /* Button0__BTN */
  76:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     1u, /* ProximitySensor0__PROX */
  77:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
  78:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** };
  79:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
  80:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
  81:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
  82:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
  83:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** /*******************************************************************************
  84:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Function Name: CapSense_CSD_BaseInit
  85:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** ********************************************************************************
  86:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 4


  87:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Summary:
  88:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  Loads the CapSense_CSD_sensorBaseline[sensor] array element with an 
  89:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  initial value which is equal to raw count value. 
  90:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  Resets to zero CapSense_CSD_sensorBaselineLow[sensor] and 
  91:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  CapSense_CSD_sensorSignal[sensor] array element.
  92:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  Loads CapSense_CSD_debounceCounter[sensor] array element with initial 
  93:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  value equal CapSense_CSD_debounce[].
  94:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  Loads the CapSense_CSD_rawFilterData2[sensor] and 
  95:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  CapSense_CSD_rawFilterData2[sensor] array element with an 
  96:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  initial value which is equal raw count value if raw data filter is enabled.
  97:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
  98:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Parameters:
  99:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  sensor:  Sensor number.
 100:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 101:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Return:
 102:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  None
 103:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 104:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Global Variables:
 105:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  CapSense_CSD_sensorBaseline[]    - used to store baseline value.
 106:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  CapSense_CSD_sensorBaselineLow[] - used to store fraction byte of 
 107:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  baseline value.
 108:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  CapSense_CSD_sensorSignal[]      - used to store diffence between 
 109:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  current value of raw data and previous value of baseline.
 110:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  CapSense_CSD_debounceCounter[]   - used to store current debounce 
 111:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  counter of sensor. Widget which has this parameter are buttons, matrix 
 112:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  buttons, proximity, guard. All other widgets haven't debounce parameter
 113:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  and use the last element of this array with value 0 (it means no debounce).
 114:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  CapSense_CSD_rawFilterData1[]    - used to store previous sample of 
 115:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  any enabled raw data filter.
 116:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  CapSense_CSD_rawFilterData2[]    - used to store before previous sample
 117:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  of enabled raw data filter. Only required for median or average filters.
 118:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 119:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Reentrant:
 120:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  No
 121:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 122:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *******************************************************************************/
 123:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** void CapSense_CSD_BaseInit(uint8 sensor) 
 124:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** {
  86              		.loc 1 124 0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 16
  89              		@ frame_needed = 1, uses_anonymous_args = 0
  90              		@ link register save eliminated.
  91 0000 80B4     		push	{r7}
  92              		.cfi_def_cfa_offset 4
  93              		.cfi_offset 7, -4
  94 0002 85B0     		sub	sp, sp, #20
  95              		.cfi_def_cfa_offset 24
  96 0004 00AF     		add	r7, sp, #0
  97              		.cfi_def_cfa_register 7
  98 0006 0346     		mov	r3, r0
  99 0008 FB71     		strb	r3, [r7, #7]
 125:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     #if ((CapSense_CSD_TOTAL_BUTTONS_COUNT) || (CapSense_CSD_TOTAL_MATRIX_BUTTONS_COUNT) || \
 126:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****          (CapSense_CSD_TOTAL_GENERICS_COUNT))
 127:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         uint8 widget = CapSense_CSD_widgetNumber[sensor];
 100              		.loc 1 127 0
 101 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 5


 102 000c 174A     		ldr	r2, .L2
 103 000e D35C     		ldrb	r3, [r2, r3]
 104 0010 FB73     		strb	r3, [r7, #15]
 128:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     #endif /* ((CapSense_CSD_TOTAL_MATRIX_BUTTONS_COUNT) || (CapSense_CSD_TOTAL_MATRIX_BUTTONS_COUN
 129:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     
 130:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     #if (CapSense_CSD_TOTAL_MATRIX_BUTTONS_COUNT)
 131:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         uint8 debounceIndex;
 132:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     #endif  /* (CapSense_CSD_TOTAL_MATRIX_BUTTONS_COUNT) */
 133:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     
 134:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     #if (CapSense_CSD_TOTAL_GENERICS_COUNT)
 135:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         /* Exclude generic widget */
 136:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         if(widget < CapSense_CSD_END_OF_WIDGETS_INDEX)
 137:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         {
 138:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     #endif  /* CapSense_CSD_TOTAL_GENERICS_COUNT */
 139:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     
 140:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     /* Initialize Baseline */
 141:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     CapSense_CSD_sensorBaseline[sensor] = CapSense_CSD_sensorRaw[sensor];
 105              		.loc 1 141 0
 106 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 107 0014 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 108 0016 1649     		ldr	r1, .L2+4
 109 0018 31F81210 		ldrh	r1, [r1, r2, lsl #1]
 110 001c 154A     		ldr	r2, .L2+8
 111 001e 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 142:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     CapSense_CSD_sensorBaselineLow[sensor] = 0u;
 112              		.loc 1 142 0
 113 0022 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 114 0024 144A     		ldr	r2, .L2+12
 115 0026 0021     		movs	r1, #0
 116 0028 D154     		strb	r1, [r2, r3]
 143:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     CapSense_CSD_sensorSignal[sensor] = 0u;
 117              		.loc 1 143 0
 118 002a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 119 002c 134A     		ldr	r2, .L2+16
 120 002e 0021     		movs	r1, #0
 121 0030 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 144:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         
 145:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     CapSense_CSD_debounceCounter[widget] =  CapSense_CSD_debounce[widget];
 122              		.loc 1 145 0
 123 0034 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 124 0036 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 125 0038 1149     		ldr	r1, .L2+20
 126 003a 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 127 003c 114A     		ldr	r2, .L2+24
 128 003e D154     		strb	r1, [r2, r3]
 146:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
 147:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     
 148:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     #if ((CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_MEDIAN_FILTER) |\
 149:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****          (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_AVERAGING_FILTER))
 150:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
 151:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         CapSense_CSD_rawFilterData1[sensor] = CapSense_CSD_sensorRaw[sensor];
 129              		.loc 1 151 0
 130 0040 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 131 0042 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 132 0044 0A49     		ldr	r1, .L2+4
 133 0046 31F81210 		ldrh	r1, [r1, r2, lsl #1]
 134 004a 0F4A     		ldr	r2, .L2+28
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 6


 135 004c 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 152:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         CapSense_CSD_rawFilterData2[sensor] = CapSense_CSD_sensorRaw[sensor];
 136              		.loc 1 152 0
 137 0050 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 138 0052 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 139 0054 0649     		ldr	r1, .L2+4
 140 0056 31F81210 		ldrh	r1, [r1, r2, lsl #1]
 141 005a 0C4A     		ldr	r2, .L2+32
 142 005c 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 153:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     
 154:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     #elif ((CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_IIR2_FILTER) |\
 155:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****            (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_IIR4_FILTER) |\
 156:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****            (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_JITTER_FILTER) |\
 157:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****            (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_IIR8_FILTER) |\
 158:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****            (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_IIR16_FILTER))
 159:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             
 160:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         CapSense_CSD_rawFilterData1[sensor] = CapSense_CSD_sensorRaw[sensor];
 161:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     
 162:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     #else
 163:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         /* No Raw filters */
 164:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     #endif  /* ((CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_MEDIAN_FILTER) | \
 165:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             *   (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_AVERAGING_FILTER))
 166:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             */
 167:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     
 168:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     #if (CapSense_CSD_TOTAL_GENERICS_COUNT)
 169:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         /* Exclude generic widget */
 170:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         }
 171:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     #endif  /* CapSense_CSD_TOTAL_GENERICS_COUNT */
 172:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** }
 143              		.loc 1 172 0
 144 0060 00BF     		nop
 145 0062 1437     		adds	r7, r7, #20
 146              		.cfi_def_cfa_offset 4
 147 0064 BD46     		mov	sp, r7
 148              		.cfi_def_cfa_register 13
 149              		@ sp needed
 150 0066 80BC     		pop	{r7}
 151              		.cfi_restore 7
 152              		.cfi_def_cfa_offset 0
 153 0068 7047     		bx	lr
 154              	.L3:
 155 006a 00BF     		.align	2
 156              	.L2:
 157 006c 00000000 		.word	CapSense_CSD_widgetNumber
 158 0070 00000000 		.word	CapSense_CSD_sensorRaw
 159 0074 00000000 		.word	CapSense_CSD_sensorBaseline
 160 0078 00000000 		.word	CapSense_CSD_sensorBaselineLow
 161 007c 00000000 		.word	CapSense_CSD_sensorSignal
 162 0080 00000000 		.word	CapSense_CSD_debounce
 163 0084 00000000 		.word	CapSense_CSD_debounceCounter
 164 0088 00000000 		.word	CapSense_CSD_rawFilterData1
 165 008c 00000000 		.word	CapSense_CSD_rawFilterData2
 166              		.cfi_endproc
 167              	.LFE0:
 168              		.size	CapSense_CSD_BaseInit, .-CapSense_CSD_BaseInit
 169              		.section	.text.CapSense_CSD_InitializeSensorBaseline,"ax",%progbits
 170              		.align	2
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 7


 171              		.global	CapSense_CSD_InitializeSensorBaseline
 172              		.thumb
 173              		.thumb_func
 174              		.type	CapSense_CSD_InitializeSensorBaseline, %function
 175              	CapSense_CSD_InitializeSensorBaseline:
 176              	.LFB1:
 173:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
 174:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
 175:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** /*******************************************************************************
 176:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Function Name: CapSense_CSD_InitializeSensorBaseline
 177:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** ********************************************************************************
 178:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 179:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Summary:
 180:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  Loads the CapSense_CSD_sensorBaseline[sensor] array element with an 
 181:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  initial value by scanning the selected sensor (one channel design) or pair 
 182:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  of sensors (two channels designs). The raw count value is copied into the 
 183:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  baseline array for each sensor. The raw data filters are initialized if 
 184:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  enabled.
 185:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 186:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Parameters:
 187:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  sensor:  Sensor number.
 188:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 189:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Return:
 190:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  None
 191:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 192:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Reentrant:
 193:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  No
 194:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 195:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *******************************************************************************/
 196:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** void CapSense_CSD_InitializeSensorBaseline(uint8 sensor)
 197:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                           
 198:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** {
 177              		.loc 1 198 0
 178              		.cfi_startproc
 179              		@ args = 0, pretend = 0, frame = 8
 180              		@ frame_needed = 1, uses_anonymous_args = 0
 181 0000 80B5     		push	{r7, lr}
 182              		.cfi_def_cfa_offset 8
 183              		.cfi_offset 7, -8
 184              		.cfi_offset 14, -4
 185 0002 82B0     		sub	sp, sp, #8
 186              		.cfi_def_cfa_offset 16
 187 0004 00AF     		add	r7, sp, #0
 188              		.cfi_def_cfa_register 7
 189 0006 0346     		mov	r3, r0
 190 0008 FB71     		strb	r3, [r7, #7]
 199:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     /* Scan sensor */
 200:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     CapSense_CSD_ScanSensor(sensor);
 191              		.loc 1 200 0
 192 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 193 000c 1846     		mov	r0, r3
 194 000e FFF7FEFF 		bl	CapSense_CSD_ScanSensor
 201:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     while(CapSense_CSD_IsBusy() != 0u)
 195              		.loc 1 201 0
 196 0012 00BF     		nop
 197              	.L5:
 198              		.loc 1 201 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 8


 199 0014 FFF7FEFF 		bl	CapSense_CSD_IsBusy
 200 0018 0346     		mov	r3, r0
 201 001a 002B     		cmp	r3, #0
 202 001c FAD1     		bne	.L5
 202:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     {
 203:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         /* Wait while busy */
 204:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     }
 205:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     
 206:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     #if (CapSense_CSD_DESIGN_TYPE == CapSense_CSD_ONE_CHANNEL_DESIGN)
 207:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         /* Initialize Baseline, Signal and debounce counters */       
 208:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         CapSense_CSD_BaseInit(sensor);
 203              		.loc 1 208 0 is_stmt 1
 204 001e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 205 0020 1846     		mov	r0, r3
 206 0022 FFF7FEFF 		bl	CapSense_CSD_BaseInit
 209:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         
 210:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     #else
 211:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     
 212:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         if(sensor < CapSense_CSD_TOTAL_SENSOR_COUNT__CH0)
 213:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         {
 214:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             /* Initialize Baseline, Signal and debounce counters */ 
 215:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             CapSense_CSD_BaseInit(sensor);
 216:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         }
 217:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         
 218:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         if(sensor < CapSense_CSD_TOTAL_SENSOR_COUNT__CH1)
 219:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         {
 220:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             /* Initialize Baseline, Signal and debounce counters */
 221:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             CapSense_CSD_BaseInit(sensor + CapSense_CSD_TOTAL_SENSOR_COUNT__CH0);
 222:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         }
 223:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     
 224:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     #endif  /* (CapSense_CSD_DESIGN_TYPE == CapSense_CSD_ONE_CHANNEL_DESIGN) */
 225:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** }
 207              		.loc 1 225 0
 208 0026 00BF     		nop
 209 0028 0837     		adds	r7, r7, #8
 210              		.cfi_def_cfa_offset 8
 211 002a BD46     		mov	sp, r7
 212              		.cfi_def_cfa_register 13
 213              		@ sp needed
 214 002c 80BD     		pop	{r7, pc}
 215              		.cfi_endproc
 216              	.LFE1:
 217              		.size	CapSense_CSD_InitializeSensorBaseline, .-CapSense_CSD_InitializeSensorBaseline
 218 002e 00BF     		.section	.text.CapSense_CSD_InitializeAllBaselines,"ax",%progbits
 219              		.align	2
 220              		.global	CapSense_CSD_InitializeAllBaselines
 221              		.thumb
 222              		.thumb_func
 223              		.type	CapSense_CSD_InitializeAllBaselines, %function
 224              	CapSense_CSD_InitializeAllBaselines:
 225              	.LFB2:
 226:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
 227:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
 228:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** /*******************************************************************************
 229:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Function Name: CapSense_CSD_InitializeAllBaselines
 230:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** ********************************************************************************
 231:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 9


 232:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Summary:
 233:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  Uses the CapSense_CSD_InitializeSensorBaseline function to loads the 
 234:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  CapSense_CSD_sensorBaseline[] array with an initial values by scanning 
 235:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  all sensors. The raw count values are copied into the baseline array for 
 236:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  all sensors. The raw data filters are initialized if enabled.
 237:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 238:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Parameters:
 239:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  None
 240:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 241:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Return:
 242:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  None
 243:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 244:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Reentrant:
 245:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  No
 246:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 247:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *******************************************************************************/
 248:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** void CapSense_CSD_InitializeAllBaselines(void)
 249:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                           
 250:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** {
 226              		.loc 1 250 0
 227              		.cfi_startproc
 228              		@ args = 0, pretend = 0, frame = 8
 229              		@ frame_needed = 1, uses_anonymous_args = 0
 230 0000 80B5     		push	{r7, lr}
 231              		.cfi_def_cfa_offset 8
 232              		.cfi_offset 7, -8
 233              		.cfi_offset 14, -4
 234 0002 82B0     		sub	sp, sp, #8
 235              		.cfi_def_cfa_offset 16
 236 0004 00AF     		add	r7, sp, #0
 237              		.cfi_def_cfa_register 7
 251:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     uint8 i;
 252:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     
 253:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     /* The baseline initialize by sensor of sensor pair */
 254:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     for(i = 0u; i < CapSense_CSD_TOTAL_SCANSLOT_COUNT; i++)
 238              		.loc 1 254 0
 239 0006 0023     		movs	r3, #0
 240 0008 FB71     		strb	r3, [r7, #7]
 241 000a 06E0     		b	.L7
 242              	.L8:
 255:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     {
 256:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         CapSense_CSD_InitializeSensorBaseline(i);
 243              		.loc 1 256 0 discriminator 3
 244 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 245 000e 1846     		mov	r0, r3
 246 0010 FFF7FEFF 		bl	CapSense_CSD_InitializeSensorBaseline
 254:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     {
 247              		.loc 1 254 0 discriminator 3
 248 0014 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 249 0016 0133     		adds	r3, r3, #1
 250 0018 FB71     		strb	r3, [r7, #7]
 251              	.L7:
 254:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     {
 252              		.loc 1 254 0 is_stmt 0 discriminator 1
 253 001a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 254 001c 012B     		cmp	r3, #1
 255 001e F5D9     		bls	.L8
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 10


 257:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     }
 258:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** }
 256              		.loc 1 258 0 is_stmt 1
 257 0020 00BF     		nop
 258 0022 0837     		adds	r7, r7, #8
 259              		.cfi_def_cfa_offset 8
 260 0024 BD46     		mov	sp, r7
 261              		.cfi_def_cfa_register 13
 262              		@ sp needed
 263 0026 80BD     		pop	{r7, pc}
 264              		.cfi_endproc
 265              	.LFE2:
 266              		.size	CapSense_CSD_InitializeAllBaselines, .-CapSense_CSD_InitializeAllBaselines
 267              		.section	.text.CapSense_CSD_InitializeEnabledBaselines,"ax",%progbits
 268              		.align	2
 269              		.global	CapSense_CSD_InitializeEnabledBaselines
 270              		.thumb
 271              		.thumb_func
 272              		.type	CapSense_CSD_InitializeEnabledBaselines, %function
 273              	CapSense_CSD_InitializeEnabledBaselines:
 274              	.LFB3:
 259:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
 260:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
 261:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** /*******************************************************************************
 262:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Function Name: CapSense_CSD_InitializeEnabledBaselines
 263:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** ********************************************************************************
 264:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 265:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Summary:
 266:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  Scans all enabled widgets and the raw count values are copied into the 
 267:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  baseline array for all sensors enabled in scanning process. Baselines 
 268:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  initialize with zero values for sensors disabled from scanning process. 
 269:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  The raw data filters are initialized if enabled.
 270:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 271:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Parameters:
 272:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  None
 273:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 274:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Return:
 275:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  None
 276:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 277:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Reentrant:
 278:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  No
 279:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 280:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *******************************************************************************/
 281:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** void CapSense_CSD_InitializeEnabledBaselines(void)
 282:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                              
 283:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** {
 275              		.loc 1 283 0
 276              		.cfi_startproc
 277              		@ args = 0, pretend = 0, frame = 8
 278              		@ frame_needed = 1, uses_anonymous_args = 0
 279 0000 80B5     		push	{r7, lr}
 280              		.cfi_def_cfa_offset 8
 281              		.cfi_offset 7, -8
 282              		.cfi_offset 14, -4
 283 0002 82B0     		sub	sp, sp, #8
 284              		.cfi_def_cfa_offset 16
 285 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 11


 286              		.cfi_def_cfa_register 7
 284:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     uint8 i;
 285:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     uint8 pos;
 286:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     uint8 enMask;
 287:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     
 288:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     CapSense_CSD_ScanEnabledWidgets();
 287              		.loc 1 288 0
 288 0006 FFF7FEFF 		bl	CapSense_CSD_ScanEnabledWidgets
 289:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     while(CapSense_CSD_IsBusy() != 0u)
 289              		.loc 1 289 0
 290 000a 00BF     		nop
 291              	.L10:
 292              		.loc 1 289 0 is_stmt 0 discriminator 1
 293 000c FFF7FEFF 		bl	CapSense_CSD_IsBusy
 294 0010 0346     		mov	r3, r0
 295 0012 002B     		cmp	r3, #0
 296 0014 FAD1     		bne	.L10
 290:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     {
 291:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         /* Wait while busy */
 292:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     }
 293:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     
 294:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     for(i = 0u; i < CapSense_CSD_TOTAL_SENSOR_COUNT; i++)
 297              		.loc 1 294 0 is_stmt 1
 298 0016 0023     		movs	r3, #0
 299 0018 FB71     		strb	r3, [r7, #7]
 300 001a 1DE0     		b	.L11
 301              	.L13:
 295:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     {
 296:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         pos = (i >> 3u);
 302              		.loc 1 296 0
 303 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 304 001e DB08     		lsrs	r3, r3, #3
 305 0020 BB71     		strb	r3, [r7, #6]
 297:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         enMask = 0x01u << (i & 0x07u);
 306              		.loc 1 297 0
 307 0022 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 308 0024 03F00703 		and	r3, r3, #7
 309 0028 0122     		movs	r2, #1
 310 002a 02FA03F3 		lsl	r3, r2, r3
 311 002e 7B71     		strb	r3, [r7, #5]
 298:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         
 299:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         /* Clear raw data if sensor is disabled from scanning process */
 300:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         if((CapSense_CSD_sensorEnableMask[pos] & enMask) == 0u)
 312              		.loc 1 300 0
 313 0030 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 314 0032 0D4A     		ldr	r2, .L14
 315 0034 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 316 0036 7B79     		ldrb	r3, [r7, #5]
 317 0038 1340     		ands	r3, r3, r2
 318 003a DBB2     		uxtb	r3, r3
 319 003c 002B     		cmp	r3, #0
 320 003e 04D1     		bne	.L12
 301:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         {
 302:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             CapSense_CSD_sensorRaw[i] = 0u;
 321              		.loc 1 302 0
 322 0040 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 323 0042 0A4A     		ldr	r2, .L14+4
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 12


 324 0044 0021     		movs	r1, #0
 325 0046 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 326              	.L12:
 303:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         }
 304:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         
 305:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         /* Initialize baselines */
 306:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         CapSense_CSD_BaseInit(i);
 327              		.loc 1 306 0 discriminator 2
 328 004a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 329 004c 1846     		mov	r0, r3
 330 004e FFF7FEFF 		bl	CapSense_CSD_BaseInit
 294:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     {
 331              		.loc 1 294 0 discriminator 2
 332 0052 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 333 0054 0133     		adds	r3, r3, #1
 334 0056 FB71     		strb	r3, [r7, #7]
 335              	.L11:
 294:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     {
 336              		.loc 1 294 0 is_stmt 0 discriminator 1
 337 0058 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 338 005a 012B     		cmp	r3, #1
 339 005c DED9     		bls	.L13
 307:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     }
 308:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** }  
 340              		.loc 1 308 0 is_stmt 1
 341 005e 00BF     		nop
 342 0060 0837     		adds	r7, r7, #8
 343              		.cfi_def_cfa_offset 8
 344 0062 BD46     		mov	sp, r7
 345              		.cfi_def_cfa_register 13
 346              		@ sp needed
 347 0064 80BD     		pop	{r7, pc}
 348              	.L15:
 349 0066 00BF     		.align	2
 350              	.L14:
 351 0068 00000000 		.word	CapSense_CSD_sensorEnableMask
 352 006c 00000000 		.word	CapSense_CSD_sensorRaw
 353              		.cfi_endproc
 354              	.LFE3:
 355              		.size	CapSense_CSD_InitializeEnabledBaselines, .-CapSense_CSD_InitializeEnabledBaselines
 356              		.section	.text.CapSense_CSD_UpdateSensorBaseline,"ax",%progbits
 357              		.align	2
 358              		.global	CapSense_CSD_UpdateSensorBaseline
 359              		.thumb
 360              		.thumb_func
 361              		.type	CapSense_CSD_UpdateSensorBaseline, %function
 362              	CapSense_CSD_UpdateSensorBaseline:
 363              	.LFB4:
 309:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
 310:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
 311:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** /*******************************************************************************
 312:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Function Name: CapSense_CSD_UpdateSensorBaseline
 313:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** ********************************************************************************
 314:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 315:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Summary:
 316:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  Updates the CapSense_CSD_sensorBaseline[sensor] array element using the 
 317:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  LP filter with k = 256. The signal calculates the difference of count by 
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 13


 318:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  subtracting the previous baseline from the current raw count value and stores
 319:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  it in CapSense_CSD_SensorSignal[sensor]. 
 320:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  If auto reset option is enabled the baseline updated regards noise threshold. 
 321:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  If auto reset option is disabled the baseline stops updating if signal is 
 322:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  greater that zero and baseline loads with raw count value if signal is less 
 323:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  that noise threshold.
 324:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  Raw data filters are applied to the values if enabled before baseline 
 325:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  calculation.
 326:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 327:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Parameters:
 328:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  sensor:  Sensor number.
 329:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 330:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Return:
 331:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  None
 332:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 333:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Global Variables:
 334:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  CapSense_CSD_sensorBaseline[]    - used to store baseline value.
 335:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  CapSense_CSD_sensorBaselineLow[] - used to store fraction byte of 
 336:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  baseline value.
 337:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  CapSense_CSD_sensorSignal[]      - used to store diffence between 
 338:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  current value of raw data and previous value of baseline.
 339:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  CapSense_CSD_rawFilterData1[]    - used to store previous sample of 
 340:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  any enabled raw data filter.
 341:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  CapSense_CSD_rawFilterData2[]    - used to store before previous sample
 342:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  of enabled raw data filter. Only required for median or average filters.
 343:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 344:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Reentrant:
 345:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  No
 346:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 347:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *******************************************************************************/
 348:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****  void CapSense_CSD_UpdateSensorBaseline(uint8 sensor)
 349:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                  
 350:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** {
 364              		.loc 1 350 0
 365              		.cfi_startproc
 366              		@ args = 0, pretend = 0, frame = 24
 367              		@ frame_needed = 1, uses_anonymous_args = 0
 368 0000 80B5     		push	{r7, lr}
 369              		.cfi_def_cfa_offset 8
 370              		.cfi_offset 7, -8
 371              		.cfi_offset 14, -4
 372 0002 86B0     		sub	sp, sp, #24
 373              		.cfi_def_cfa_offset 32
 374 0004 00AF     		add	r7, sp, #0
 375              		.cfi_def_cfa_register 7
 376 0006 0346     		mov	r3, r0
 377 0008 FB71     		strb	r3, [r7, #7]
 351:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     uint32 calc;
 352:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     uint16 tempRaw;
 353:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     uint16 filteredRawData;
 354:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     uint8 widget = CapSense_CSD_widgetNumber[sensor];
 378              		.loc 1 354 0
 379 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 380 000c 544A     		ldr	r2, .L26
 381 000e D35C     		ldrb	r3, [r2, r3]
 382 0010 7B75     		strb	r3, [r7, #21]
 355:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     uint16 noiseThreshold = CapSense_CSD_noiseThreshold[widget];
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 14


 383              		.loc 1 355 0
 384 0012 7B7D     		ldrb	r3, [r7, #21]	@ zero_extendqisi2
 385 0014 534A     		ldr	r2, .L26+4
 386 0016 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 387 001a 7B82     		strh	r3, [r7, #18]	@ movhi
 356:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     
 357:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     #if (CapSense_CSD_TOTAL_GENERICS_COUNT)
 358:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         /* Exclude generic widget */
 359:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         if(widget < CapSense_CSD_END_OF_WIDGETS_INDEX)
 360:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         {
 361:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     #endif  /* CapSense_CSD_TOTAL_GENERICS_COUNT */
 362:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     
 363:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     filteredRawData = CapSense_CSD_sensorRaw[sensor];
 388              		.loc 1 363 0
 389 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 390 001e 524A     		ldr	r2, .L26+8
 391 0020 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 392 0024 3B82     		strh	r3, [r7, #16]	@ movhi
 364:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     
 365:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     #if (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_MEDIAN_FILTER)
 366:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         tempRaw = filteredRawData;
 393              		.loc 1 366 0
 394 0026 3B8A     		ldrh	r3, [r7, #16]	@ movhi
 395 0028 FB82     		strh	r3, [r7, #22]	@ movhi
 367:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         filteredRawData = CapSense_CSD_MedianFilter(filteredRawData, CapSense_CSD_rawFilterData1[se
 396              		.loc 1 367 0
 397 002a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 398 002c 4F4A     		ldr	r2, .L26+12
 399 002e 32F81310 		ldrh	r1, [r2, r3, lsl #1]
 400 0032 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 401 0034 4E4A     		ldr	r2, .L26+16
 402 0036 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 403 003a 3B8A     		ldrh	r3, [r7, #16]
 404 003c 1846     		mov	r0, r3
 405 003e FFF7FEFF 		bl	CapSense_CSD_MedianFilter
 406 0042 0346     		mov	r3, r0
 407 0044 3B82     		strh	r3, [r7, #16]	@ movhi
 368:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                                         CapSense_CSD_rawFilterData2[sensor]);
 369:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         CapSense_CSD_rawFilterData2[sensor] = CapSense_CSD_rawFilterData1[sensor];
 408              		.loc 1 369 0
 409 0046 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 410 0048 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 411 004a 4849     		ldr	r1, .L26+12
 412 004c 31F81210 		ldrh	r1, [r1, r2, lsl #1]
 413 0050 474A     		ldr	r2, .L26+16
 414 0052 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 370:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         CapSense_CSD_rawFilterData1[sensor] = tempRaw;
 415              		.loc 1 370 0
 416 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 417 0058 4449     		ldr	r1, .L26+12
 418 005a FA8A     		ldrh	r2, [r7, #22]	@ movhi
 419 005c 21F81320 		strh	r2, [r1, r3, lsl #1]	@ movhi
 371:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         
 372:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     #elif (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_AVERAGING_FILTER)
 373:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         tempRaw = filteredRawData;
 374:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         filteredRawData = CapSense_CSD_AveragingFilter(filteredRawData, CapSense_CSD_rawFilterData1
 375:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                                            CapSense_CSD_rawFilterData2[sensor]);
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 15


 376:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         CapSense_CSD_rawFilterData2[sensor] = CapSense_CSD_rawFilterData1[sensor];
 377:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         CapSense_CSD_rawFilterData1[sensor] = tempRaw;
 378:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         
 379:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     #elif (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_IIR2_FILTER)
 380:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         filteredRawData = CapSense_CSD_IIR2Filter(filteredRawData, CapSense_CSD_rawFilterData1[sens
 381:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         CapSense_CSD_rawFilterData1[sensor] = filteredRawData;
 382:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         
 383:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     #elif (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_IIR4_FILTER)
 384:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         filteredRawData = CapSense_CSD_IIR4Filter(filteredRawData, CapSense_CSD_rawFilterData1[sens
 385:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         CapSense_CSD_rawFilterData1[sensor] = filteredRawData;
 386:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             
 387:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     #elif (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_JITTER_FILTER)
 388:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         filteredRawData = CapSense_CSD_JitterFilter(filteredRawData, CapSense_CSD_rawFilterData1[se
 389:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         CapSense_CSD_rawFilterData1[sensor] = filteredRawData;
 390:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         
 391:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     #elif (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_IIR8_FILTER)
 392:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         filteredRawData = CapSense_CSD_IIR8Filter(filteredRawData, CapSense_CSD_rawFilterData1[sens
 393:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         CapSense_CSD_rawFilterData1[sensor] = filteredRawData;
 394:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         
 395:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     #elif (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_IIR16_FILTER)
 396:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         filteredRawData = CapSense_CSD_IIR16Filter(filteredRawData, CapSense_CSD_rawFilterData1[sen
 397:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         CapSense_CSD_rawFilterData1[sensor] = filteredRawData;
 398:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         
 399:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     #else
 400:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         /* No Raw filters */
 401:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     #endif  /* (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_MEDIAN_FILTER) */
 402:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     
 403:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     #if (CapSense_CSD_TUNING_METHOD == CapSense_CSD_AUTO_TUNING)
 404:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         CapSense_CSD_CalculateThresholds(sensor);
 405:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     #endif /* (CapSense_CSD_TUNING_METHOD == CapSense_CSD_AUTO_TUNING) */
 406:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
 407:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
 408:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     /* Baseline calculation */
 409:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     /* Calculate difference RawData[cur] - Baseline[prev] */
 410:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     if(filteredRawData >= CapSense_CSD_sensorBaseline[sensor])
 420              		.loc 1 410 0
 421 0060 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 422 0062 444A     		ldr	r2, .L26+20
 423 0064 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 424 0068 3A8A     		ldrh	r2, [r7, #16]
 425 006a 9A42     		cmp	r2, r3
 426 006c 09D3     		bcc	.L17
 411:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     {
 412:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         tempRaw = filteredRawData - CapSense_CSD_sensorBaseline[sensor];
 427              		.loc 1 412 0
 428 006e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 429 0070 404A     		ldr	r2, .L26+20
 430 0072 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 431 0076 3A8A     		ldrh	r2, [r7, #16]	@ movhi
 432 0078 D31A     		subs	r3, r2, r3
 433 007a FB82     		strh	r3, [r7, #22]	@ movhi
 413:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         widget = 1u;    /* Positive difference - Calculate the Signal */
 434              		.loc 1 413 0
 435 007c 0123     		movs	r3, #1
 436 007e 7B75     		strb	r3, [r7, #21]
 437 0080 08E0     		b	.L18
 438              	.L17:
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 16


 414:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     }
 415:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     else
 416:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     {
 417:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         tempRaw = CapSense_CSD_sensorBaseline[sensor] - filteredRawData;
 439              		.loc 1 417 0
 440 0082 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 441 0084 3B4A     		ldr	r2, .L26+20
 442 0086 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 443 008a 3B8A     		ldrh	r3, [r7, #16]	@ movhi
 444 008c D31A     		subs	r3, r2, r3
 445 008e FB82     		strh	r3, [r7, #22]	@ movhi
 418:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         widget = 0u;    /* Negative difference - Do NOT calculate the Signal */
 446              		.loc 1 418 0
 447 0090 0023     		movs	r3, #0
 448 0092 7B75     		strb	r3, [r7, #21]
 449              	.L18:
 419:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     }
 420:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
 421:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     if((widget == 0u) && (tempRaw > (uint16) CapSense_CSD_NEGATIVE_NOISE_THRESHOLD))
 450              		.loc 1 421 0
 451 0094 7B7D     		ldrb	r3, [r7, #21]	@ zero_extendqisi2
 452 0096 002B     		cmp	r3, #0
 453 0098 18D1     		bne	.L19
 454              		.loc 1 421 0 is_stmt 0 discriminator 1
 455 009a FB8A     		ldrh	r3, [r7, #22]
 456 009c 142B     		cmp	r3, #20
 457 009e 15D9     		bls	.L19
 422:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     {
 423:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         if(CapSense_CSD_lowBaselineResetCnt[sensor] >= CapSense_CSD_LOW_BASELINE_RESET)
 458              		.loc 1 423 0 is_stmt 1
 459 00a0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 460 00a2 354A     		ldr	r2, .L26+24
 461 00a4 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 462 00a6 042B     		cmp	r3, #4
 463 00a8 08D9     		bls	.L20
 424:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         {
 425:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             CapSense_CSD_BaseInit(sensor);
 464              		.loc 1 425 0
 465 00aa FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 466 00ac 1846     		mov	r0, r3
 467 00ae FFF7FEFF 		bl	CapSense_CSD_BaseInit
 426:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             CapSense_CSD_lowBaselineResetCnt[sensor] = 0u;
 468              		.loc 1 426 0
 469 00b2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 470 00b4 304A     		ldr	r2, .L26+24
 471 00b6 0021     		movs	r1, #0
 472 00b8 D154     		strb	r1, [r2, r3]
 423:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         {
 473              		.loc 1 423 0
 474 00ba 3AE0     		b	.L22
 475              	.L20:
 427:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         }
 428:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         else
 429:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         {
 430:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             CapSense_CSD_lowBaselineResetCnt[sensor]++;
 476              		.loc 1 430 0
 477 00bc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 17


 478 00be 2E4A     		ldr	r2, .L26+24
 479 00c0 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 480 00c2 0132     		adds	r2, r2, #1
 481 00c4 D1B2     		uxtb	r1, r2
 482 00c6 2C4A     		ldr	r2, .L26+24
 483 00c8 D154     		strb	r1, [r2, r3]
 423:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         {
 484              		.loc 1 423 0
 485 00ca 32E0     		b	.L22
 486              	.L19:
 431:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         }
 432:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     }
 433:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     else
 434:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     {
 435:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         #if (CapSense_CSD_AUTO_RESET == CapSense_CSD_AUTO_RESET_DISABLE)
 436:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             /* Update Baseline if lower that noiseThreshold */
 437:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             if ( (tempRaw <= (uint16) noiseThreshold) || 
 487              		.loc 1 437 0
 488 00cc FA8A     		ldrh	r2, [r7, #22]
 489 00ce 7B8A     		ldrh	r3, [r7, #18]
 490 00d0 9A42     		cmp	r2, r3
 491 00d2 05D9     		bls	.L23
 492              		.loc 1 437 0 is_stmt 0 discriminator 1
 493 00d4 FB8A     		ldrh	r3, [r7, #22]
 494 00d6 132B     		cmp	r3, #19
 495 00d8 2BD8     		bhi	.L22
 438:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                  ((tempRaw < (uint16) CapSense_CSD_NEGATIVE_NOISE_THRESHOLD)
 439:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                    && (widget == 0u)))
 496              		.loc 1 439 0 is_stmt 1
 497 00da 7B7D     		ldrb	r3, [r7, #21]	@ zero_extendqisi2
 498 00dc 002B     		cmp	r3, #0
 499 00de 28D1     		bne	.L22
 500              	.L23:
 440:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             {
 441:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         #endif /* (CapSense_CSD_AUTO_RESET == CapSense_CSD_AUTO_RESET_DISABLE) */
 442:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 /* Make full Baseline 23 bits */
 443:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 calc = (uint32) CapSense_CSD_sensorBaseline[sensor] << 8u;
 501              		.loc 1 443 0
 502 00e0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 503 00e2 244A     		ldr	r2, .L26+20
 504 00e4 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 505 00e8 1B02     		lsls	r3, r3, #8
 506 00ea FB60     		str	r3, [r7, #12]
 444:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 calc |= (uint32) CapSense_CSD_sensorBaselineLow[sensor];
 507              		.loc 1 444 0
 508 00ec FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 509 00ee 234A     		ldr	r2, .L26+28
 510 00f0 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 511 00f2 1A46     		mov	r2, r3
 512 00f4 FB68     		ldr	r3, [r7, #12]
 513 00f6 1343     		orrs	r3, r3, r2
 514 00f8 FB60     		str	r3, [r7, #12]
 445:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
 446:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 /* Add Raw Data to Baseline */
 447:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 calc += filteredRawData;
 515              		.loc 1 447 0
 516 00fa 3B8A     		ldrh	r3, [r7, #16]
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 18


 517 00fc FA68     		ldr	r2, [r7, #12]
 518 00fe 1344     		add	r3, r3, r2
 519 0100 FB60     		str	r3, [r7, #12]
 448:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
 449:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 /* Sub the high Baseline */
 450:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 calc -= CapSense_CSD_sensorBaseline[sensor];
 520              		.loc 1 450 0
 521 0102 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 522 0104 1B4A     		ldr	r2, .L26+20
 523 0106 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 524 010a 1A46     		mov	r2, r3
 525 010c FB68     		ldr	r3, [r7, #12]
 526 010e 9B1A     		subs	r3, r3, r2
 527 0110 FB60     		str	r3, [r7, #12]
 451:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
 452:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 /* Put Baseline and BaselineLow */
 453:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 CapSense_CSD_sensorBaseline[sensor] = ((uint16) (calc >> 8u));
 528              		.loc 1 453 0
 529 0112 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 530 0114 FA68     		ldr	r2, [r7, #12]
 531 0116 120A     		lsrs	r2, r2, #8
 532 0118 91B2     		uxth	r1, r2
 533 011a 164A     		ldr	r2, .L26+20
 534 011c 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 454:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 CapSense_CSD_sensorBaselineLow[sensor] = ((uint8) calc);
 535              		.loc 1 454 0
 536 0120 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 537 0122 FA68     		ldr	r2, [r7, #12]
 538 0124 D1B2     		uxtb	r1, r2
 539 0126 154A     		ldr	r2, .L26+28
 540 0128 D154     		strb	r1, [r2, r3]
 455:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
 456:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 CapSense_CSD_lowBaselineResetCnt[sensor] = 0u;
 541              		.loc 1 456 0
 542 012a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 543 012c 124A     		ldr	r2, .L26+24
 544 012e 0021     		movs	r1, #0
 545 0130 D154     		strb	r1, [r2, r3]
 546              	.L22:
 457:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         #if (CapSense_CSD_AUTO_RESET == CapSense_CSD_AUTO_RESET_DISABLE)
 458:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             }
 459:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         #endif /* (CapSense_CSD_AUTO_RESET == CapSense_CSD_AUTO_RESET_DISABLE) */
 460:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     }
 461:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
 462:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     /* Calculate Signal if possitive difference > noiseThreshold */
 463:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     if((tempRaw > (uint16) noiseThreshold) && (widget != 0u))
 547              		.loc 1 463 0
 548 0132 FA8A     		ldrh	r2, [r7, #22]
 549 0134 7B8A     		ldrh	r3, [r7, #18]
 550 0136 9A42     		cmp	r2, r3
 551 0138 08D9     		bls	.L24
 552              		.loc 1 463 0 is_stmt 0 discriminator 1
 553 013a 7B7D     		ldrb	r3, [r7, #21]	@ zero_extendqisi2
 554 013c 002B     		cmp	r3, #0
 555 013e 05D0     		beq	.L24
 464:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     {
 465:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         #if (CapSense_CSD_SIGNAL_SIZE == CapSense_CSD_SIGNAL_SIZE_UINT8)
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 19


 466:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             /* Over flow defence for uint8 */
 467:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             if (tempRaw > 0xFFu)
 468:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             {
 469:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 CapSense_CSD_sensorSignal[sensor] = 0xFFu;
 470:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             }    
 471:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             else 
 472:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             {
 473:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 CapSense_CSD_sensorSignal[sensor] = ((uint8) tempRaw);
 474:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             }
 475:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         #else
 476:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             CapSense_CSD_sensorSignal[sensor] = ((uint16) tempRaw);
 556              		.loc 1 476 0 is_stmt 1
 557 0140 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 558 0142 0F49     		ldr	r1, .L26+32
 559 0144 FA8A     		ldrh	r2, [r7, #22]	@ movhi
 560 0146 21F81320 		strh	r2, [r1, r3, lsl #1]	@ movhi
 561 014a 04E0     		b	.L25
 562              	.L24:
 477:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         #endif  /* (CapSense_CSD_SIGNAL_SIZE == CapSense_CSD_SIGNAL_SIZE_UINT8) */
 478:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     }
 479:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     else
 480:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     {
 481:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         /* Signal is zero */
 482:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         CapSense_CSD_sensorSignal[sensor] = 0u;
 563              		.loc 1 482 0
 564 014c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 565 014e 0C4A     		ldr	r2, .L26+32
 566 0150 0021     		movs	r1, #0
 567 0152 22F81310 		strh	r1, [r2, r3, lsl #1]	@ movhi
 568              	.L25:
 483:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     }
 484:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
 485:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     #if (CapSense_CSD_TOTAL_GENERICS_COUNT)
 486:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         /* Exclude generic widget */
 487:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         }
 488:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     #endif  /* CapSense_CSD_TOTAL_GENERICS_COUNT */
 489:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** }
 569              		.loc 1 489 0
 570 0156 00BF     		nop
 571 0158 1837     		adds	r7, r7, #24
 572              		.cfi_def_cfa_offset 8
 573 015a BD46     		mov	sp, r7
 574              		.cfi_def_cfa_register 13
 575              		@ sp needed
 576 015c 80BD     		pop	{r7, pc}
 577              	.L27:
 578 015e 00BF     		.align	2
 579              	.L26:
 580 0160 00000000 		.word	CapSense_CSD_widgetNumber
 581 0164 00000000 		.word	CapSense_CSD_noiseThreshold
 582 0168 00000000 		.word	CapSense_CSD_sensorRaw
 583 016c 00000000 		.word	CapSense_CSD_rawFilterData1
 584 0170 00000000 		.word	CapSense_CSD_rawFilterData2
 585 0174 00000000 		.word	CapSense_CSD_sensorBaseline
 586 0178 00000000 		.word	CapSense_CSD_lowBaselineResetCnt
 587 017c 00000000 		.word	CapSense_CSD_sensorBaselineLow
 588 0180 00000000 		.word	CapSense_CSD_sensorSignal
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 20


 589              		.cfi_endproc
 590              	.LFE4:
 591              		.size	CapSense_CSD_UpdateSensorBaseline, .-CapSense_CSD_UpdateSensorBaseline
 592              		.section	.text.CapSense_CSD_UpdateEnabledBaselines,"ax",%progbits
 593              		.align	2
 594              		.global	CapSense_CSD_UpdateEnabledBaselines
 595              		.thumb
 596              		.thumb_func
 597              		.type	CapSense_CSD_UpdateEnabledBaselines, %function
 598              	CapSense_CSD_UpdateEnabledBaselines:
 599              	.LFB5:
 490:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
 491:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
 492:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** /*******************************************************************************
 493:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Function Name: CapSense_CSD_UpdateEnabledBaselines
 494:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** ********************************************************************************
 495:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 496:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Summary:
 497:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  Checks CapSense_CSD_sensorEnableMask[] array and calls the 
 498:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  CapSense_CSD_UpdateSensorBaseline function to update the baselines 
 499:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  for enabled sensors.
 500:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 501:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Parameters:
 502:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  None
 503:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 504:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Return:
 505:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  None
 506:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 507:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Global Variables:
 508:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  CapSense_CSD_sensorEnableMask[] - used to store the sensor scanning 
 509:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  state.
 510:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  CapSense_CSD_sensorEnableMask[0] contains the masked bits for sensors 
 511:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *   0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
 512:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  CapSense_CSD_sensorEnableMask[1] contains the masked bits for 
 513:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  sensors 8 through 15 (if needed), and so on.
 514:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  0 - sensor doesn't scan by CapSense_CSD_ScanEnabledWidgets().
 515:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  1 - sensor scans by CapSense_CSD_ScanEnabledWidgets().
 516:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 517:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Reentrant:
 518:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  No
 519:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 520:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *******************************************************************************/
 521:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****  void CapSense_CSD_UpdateEnabledBaselines(void)
 522:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                  
 523:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** {
 600              		.loc 1 523 0
 601              		.cfi_startproc
 602              		@ args = 0, pretend = 0, frame = 8
 603              		@ frame_needed = 1, uses_anonymous_args = 0
 604 0000 80B5     		push	{r7, lr}
 605              		.cfi_def_cfa_offset 8
 606              		.cfi_offset 7, -8
 607              		.cfi_offset 14, -4
 608 0002 82B0     		sub	sp, sp, #8
 609              		.cfi_def_cfa_offset 16
 610 0004 00AF     		add	r7, sp, #0
 611              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 21


 524:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     uint8 i;
 525:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     uint8 pos;
 526:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     uint8 enMask;
 527:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     
 528:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     for(i = 0u; i < CapSense_CSD_TOTAL_SENSOR_COUNT; i++)
 612              		.loc 1 528 0
 613 0006 0023     		movs	r3, #0
 614 0008 FB71     		strb	r3, [r7, #7]
 615 000a 18E0     		b	.L29
 616              	.L31:
 529:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     {
 530:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         pos = (i >> 3u);
 617              		.loc 1 530 0
 618 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 619 000e DB08     		lsrs	r3, r3, #3
 620 0010 BB71     		strb	r3, [r7, #6]
 531:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         enMask = (uint8)(0x01u << (i & 0x07u));
 621              		.loc 1 531 0
 622 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 623 0014 03F00703 		and	r3, r3, #7
 624 0018 0122     		movs	r2, #1
 625 001a 02FA03F3 		lsl	r3, r2, r3
 626 001e 7B71     		strb	r3, [r7, #5]
 532:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         if((CapSense_CSD_sensorEnableMask[pos] & enMask) != 0u)
 627              		.loc 1 532 0
 628 0020 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 629 0022 0A4A     		ldr	r2, .L32
 630 0024 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 631 0026 7B79     		ldrb	r3, [r7, #5]
 632 0028 1340     		ands	r3, r3, r2
 633 002a DBB2     		uxtb	r3, r3
 634 002c 002B     		cmp	r3, #0
 635 002e 03D0     		beq	.L30
 533:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         {
 534:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             CapSense_CSD_UpdateSensorBaseline(i);
 636              		.loc 1 534 0
 637 0030 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 638 0032 1846     		mov	r0, r3
 639 0034 FFF7FEFF 		bl	CapSense_CSD_UpdateSensorBaseline
 640              	.L30:
 528:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     {
 641              		.loc 1 528 0 discriminator 2
 642 0038 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 643 003a 0133     		adds	r3, r3, #1
 644 003c FB71     		strb	r3, [r7, #7]
 645              	.L29:
 528:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     {
 646              		.loc 1 528 0 is_stmt 0 discriminator 1
 647 003e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 648 0040 012B     		cmp	r3, #1
 649 0042 E3D9     		bls	.L31
 535:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         }
 536:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     }
 537:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** }
 650              		.loc 1 537 0 is_stmt 1
 651 0044 00BF     		nop
 652 0046 0837     		adds	r7, r7, #8
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 22


 653              		.cfi_def_cfa_offset 8
 654 0048 BD46     		mov	sp, r7
 655              		.cfi_def_cfa_register 13
 656              		@ sp needed
 657 004a 80BD     		pop	{r7, pc}
 658              	.L33:
 659              		.align	2
 660              	.L32:
 661 004c 00000000 		.word	CapSense_CSD_sensorEnableMask
 662              		.cfi_endproc
 663              	.LFE5:
 664              		.size	CapSense_CSD_UpdateEnabledBaselines, .-CapSense_CSD_UpdateEnabledBaselines
 665              		.section	.text.CapSense_CSD_CheckIsSensorActive,"ax",%progbits
 666              		.align	2
 667              		.global	CapSense_CSD_CheckIsSensorActive
 668              		.thumb
 669              		.thumb_func
 670              		.type	CapSense_CSD_CheckIsSensorActive, %function
 671              	CapSense_CSD_CheckIsSensorActive:
 672              	.LFB6:
 538:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
 539:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
 540:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** /*******************************************************************************
 541:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Function Name: CapSense_CSD_CheckIsSensorActive
 542:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** ********************************************************************************
 543:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 544:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Summary:
 545:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  Compares the CapSense_CSD_SensorSignal[sensor] array element to finger
 546:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  threshold of widget it belongs to. The hysteresis and debounce are taken into 
 547:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  account. The hysteresis is added or subtracted from the finger threshold 
 548:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  based on whether the sensor is currently active. 
 549:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  If the sensor is active, the threshold is lowered by the hysteresis amount.
 550:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  If the sensor is inactive, the threshold is raised by the hysteresis amount.
 551:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  The debounce counter added to the sensor active transition.
 552:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  This function updates CapSense_CSD_SensorOnMask[] array element.
 553:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 554:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Parameters:
 555:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  sensor:  Sensor number.
 556:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 557:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Return:
 558:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  Returns sensor state 1 if active, 0 if not active.
 559:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 560:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Global Variables:
 561:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  CapSense_CSD_sensorSignal[]      - used to store diffence between 
 562:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  current value of raw data and previous value of baseline.
 563:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  CapSense_CSD_debounceCounter[]   - used to store current debounce 
 564:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  counter of sensor. Widget which has this parameter are buttons, matrix 
 565:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  buttons, proximity, guard. All other widgets haven't debounce parameter
 566:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  and use the last element of this array with value 0 (it means no debounce).
 567:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  CapSense_CSD_sensorOnMask[] - used to store sensors on/off state.
 568:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  CapSense_CSD_sensorOnMask[0] contains the masked bits for sensors 
 569:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *   0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
 570:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  CapSense_CSD_sensorEnableMask[1] contains the masked bits for 
 571:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  sensors 8 through 15 (if needed), and so on.
 572:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  0 - sensor is inactive.
 573:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  1 - sensor is active.
 574:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 23


 575:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Reentrant:
 576:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  No
 577:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 578:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *******************************************************************************/
 579:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** uint8 CapSense_CSD_CheckIsSensorActive(uint8 sensor)
 580:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                   
 581:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** {
 673              		.loc 1 581 0
 674              		.cfi_startproc
 675              		@ args = 0, pretend = 0, frame = 24
 676              		@ frame_needed = 1, uses_anonymous_args = 0
 677              		@ link register save eliminated.
 678 0000 80B4     		push	{r7}
 679              		.cfi_def_cfa_offset 4
 680              		.cfi_offset 7, -4
 681 0002 87B0     		sub	sp, sp, #28
 682              		.cfi_def_cfa_offset 32
 683 0004 00AF     		add	r7, sp, #0
 684              		.cfi_def_cfa_register 7
 685 0006 0346     		mov	r3, r0
 686 0008 FB71     		strb	r3, [r7, #7]
 582:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     uint8 debounceIndex;
 583:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     /* Get On/Off mask */
 584:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     uint8 pos = (sensor >> 3u);
 687              		.loc 1 584 0
 688 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 689 000c DB08     		lsrs	r3, r3, #3
 690 000e FB75     		strb	r3, [r7, #23]
 585:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     uint8 onMask = 0x01u << (sensor & 0x07u);
 691              		.loc 1 585 0
 692 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 693 0012 03F00703 		and	r3, r3, #7
 694 0016 0122     		movs	r2, #1
 695 0018 02FA03F3 		lsl	r3, r2, r3
 696 001c BB75     		strb	r3, [r7, #22]
 586:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     /* Prepare to find debounce counter index */
 587:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     uint8 widget = CapSense_CSD_widgetNumber[sensor];
 697              		.loc 1 587 0
 698 001e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 699 0020 344A     		ldr	r2, .L43
 700 0022 D35C     		ldrb	r3, [r2, r3]
 701 0024 7B75     		strb	r3, [r7, #21]
 588:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     uint16 fingerThreshold = CapSense_CSD_fingerThreshold[widget];
 702              		.loc 1 588 0
 703 0026 7B7D     		ldrb	r3, [r7, #21]	@ zero_extendqisi2
 704 0028 334A     		ldr	r2, .L43+4
 705 002a 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 706 002e 7B82     		strh	r3, [r7, #18]	@ movhi
 589:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     uint16 hysteresis = CapSense_CSD_hysteresis[widget];
 707              		.loc 1 589 0
 708 0030 7B7D     		ldrb	r3, [r7, #21]	@ zero_extendqisi2
 709 0032 324A     		ldr	r2, .L43+8
 710 0034 32F81330 		ldrh	r3, [r2, r3, lsl #1]	@ movhi
 711 0038 3B82     		strh	r3, [r7, #16]	@ movhi
 590:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     uint8 debounce = CapSense_CSD_debounce[widget];
 712              		.loc 1 590 0
 713 003a 7B7D     		ldrb	r3, [r7, #21]	@ zero_extendqisi2
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 24


 714 003c 304A     		ldr	r2, .L43+12
 715 003e D35C     		ldrb	r3, [r2, r3]
 716 0040 FB73     		strb	r3, [r7, #15]
 591:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     
 592:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     debounceIndex = widget;
 717              		.loc 1 592 0
 718 0042 7B7D     		ldrb	r3, [r7, #21]
 719 0044 BB73     		strb	r3, [r7, #14]
 593:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
 594:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     
 595:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     /* Was on */
 596:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     if (0u != (CapSense_CSD_sensorOnMask[pos] & onMask))
 720              		.loc 1 596 0
 721 0046 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 722 0048 2E4A     		ldr	r2, .L43+16
 723 004a D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 724 004c BB7D     		ldrb	r3, [r7, #22]
 725 004e 1340     		ands	r3, r3, r2
 726 0050 DBB2     		uxtb	r3, r3
 727 0052 002B     		cmp	r3, #0
 728 0054 19D0     		beq	.L35
 597:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     {
 598:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         /* Hysteresis minus */
 599:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         if (CapSense_CSD_sensorSignal[sensor] < (fingerThreshold - hysteresis))
 729              		.loc 1 599 0
 730 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 731 0058 2B4A     		ldr	r2, .L43+20
 732 005a 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 733 005e 1946     		mov	r1, r3
 734 0060 7A8A     		ldrh	r2, [r7, #18]
 735 0062 3B8A     		ldrh	r3, [r7, #16]
 736 0064 D31A     		subs	r3, r2, r3
 737 0066 9942     		cmp	r1, r3
 738 0068 33DA     		bge	.L37
 600:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         {
 601:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             CapSense_CSD_sensorOnMask[pos] &= (uint8)~onMask;
 739              		.loc 1 601 0
 740 006a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 741 006c FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 742 006e 2549     		ldr	r1, .L43+16
 743 0070 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 744 0072 BA7D     		ldrb	r2, [r7, #22]
 745 0074 D243     		mvns	r2, r2
 746 0076 D2B2     		uxtb	r2, r2
 747 0078 0A40     		ands	r2, r2, r1
 748 007a D1B2     		uxtb	r1, r2
 749 007c 214A     		ldr	r2, .L43+16
 750 007e D154     		strb	r1, [r2, r3]
 602:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             CapSense_CSD_debounceCounter[debounceIndex] = debounce; 
 751              		.loc 1 602 0
 752 0080 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 753 0082 2249     		ldr	r1, .L43+24
 754 0084 FA7B     		ldrb	r2, [r7, #15]
 755 0086 CA54     		strb	r2, [r1, r3]
 756 0088 23E0     		b	.L37
 757              	.L35:
 603:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         }
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 25


 604:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     }
 605:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     else    /* Was off */
 606:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     {
 607:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         /* Hysteresis plus */
 608:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         if (CapSense_CSD_sensorSignal[sensor] > (fingerThreshold + hysteresis))
 758              		.loc 1 608 0
 759 008a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 760 008c 1E4A     		ldr	r2, .L43+20
 761 008e 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 762 0092 1946     		mov	r1, r3
 763 0094 7A8A     		ldrh	r2, [r7, #18]
 764 0096 3B8A     		ldrh	r3, [r7, #16]
 765 0098 1344     		add	r3, r3, r2
 766 009a 9942     		cmp	r1, r3
 767 009c 15DD     		ble	.L38
 609:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         {
 610:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             /* Sensor active, decrement debounce counter */
 611:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             if (CapSense_CSD_debounceCounter[debounceIndex] <= 1u)
 768              		.loc 1 611 0
 769 009e BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 770 00a0 1A4A     		ldr	r2, .L43+24
 771 00a2 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 772 00a4 012B     		cmp	r3, #1
 773 00a6 08D8     		bhi	.L39
 612:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             {
 613:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 CapSense_CSD_sensorOnMask[pos] |= onMask; 
 774              		.loc 1 613 0
 775 00a8 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 776 00aa FA7D     		ldrb	r2, [r7, #23]	@ zero_extendqisi2
 777 00ac 1549     		ldr	r1, .L43+16
 778 00ae 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 779 00b0 BA7D     		ldrb	r2, [r7, #22]
 780 00b2 0A43     		orrs	r2, r2, r1
 781 00b4 D1B2     		uxtb	r1, r2
 782 00b6 134A     		ldr	r2, .L43+16
 783 00b8 D154     		strb	r1, [r2, r3]
 784              	.L39:
 614:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             }
 615:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             CapSense_CSD_debounceCounter[debounceIndex]--;
 785              		.loc 1 615 0
 786 00ba BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 787 00bc 134A     		ldr	r2, .L43+24
 788 00be D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 789 00c0 013A     		subs	r2, r2, #1
 790 00c2 D1B2     		uxtb	r1, r2
 791 00c4 114A     		ldr	r2, .L43+24
 792 00c6 D154     		strb	r1, [r2, r3]
 793 00c8 03E0     		b	.L37
 794              	.L38:
 616:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         }
 617:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         else
 618:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         {
 619:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             /* Sensor inactive - reset Debounce counter */
 620:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             CapSense_CSD_debounceCounter[debounceIndex] = debounce;
 795              		.loc 1 620 0
 796 00ca BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 797 00cc 0F49     		ldr	r1, .L43+24
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 26


 798 00ce FA7B     		ldrb	r2, [r7, #15]
 799 00d0 CA54     		strb	r2, [r1, r3]
 800              	.L37:
 621:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         }
 622:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     }
 623:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     
 624:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     return (((CapSense_CSD_sensorOnMask[pos] & onMask) != 0u) ? 1u : 0u);
 801              		.loc 1 624 0
 802 00d2 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 803 00d4 0B4A     		ldr	r2, .L43+16
 804 00d6 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 805 00d8 BB7D     		ldrb	r3, [r7, #22]
 806 00da 1340     		ands	r3, r3, r2
 807 00dc DBB2     		uxtb	r3, r3
 808 00de 002B     		cmp	r3, #0
 809 00e0 01D0     		beq	.L40
 810              		.loc 1 624 0 is_stmt 0 discriminator 1
 811 00e2 0123     		movs	r3, #1
 812 00e4 00E0     		b	.L41
 813              	.L40:
 814              		.loc 1 624 0 discriminator 2
 815 00e6 0023     		movs	r3, #0
 816              	.L41:
 625:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** }
 817              		.loc 1 625 0 is_stmt 1 discriminator 4
 818 00e8 1846     		mov	r0, r3
 819 00ea 1C37     		adds	r7, r7, #28
 820              		.cfi_def_cfa_offset 4
 821 00ec BD46     		mov	sp, r7
 822              		.cfi_def_cfa_register 13
 823              		@ sp needed
 824 00ee 80BC     		pop	{r7}
 825              		.cfi_restore 7
 826              		.cfi_def_cfa_offset 0
 827 00f0 7047     		bx	lr
 828              	.L44:
 829 00f2 00BF     		.align	2
 830              	.L43:
 831 00f4 00000000 		.word	CapSense_CSD_widgetNumber
 832 00f8 00000000 		.word	CapSense_CSD_fingerThreshold
 833 00fc 00000000 		.word	CapSense_CSD_hysteresis
 834 0100 00000000 		.word	CapSense_CSD_debounce
 835 0104 00000000 		.word	CapSense_CSD_sensorOnMask
 836 0108 00000000 		.word	CapSense_CSD_sensorSignal
 837 010c 00000000 		.word	CapSense_CSD_debounceCounter
 838              		.cfi_endproc
 839              	.LFE6:
 840              		.size	CapSense_CSD_CheckIsSensorActive, .-CapSense_CSD_CheckIsSensorActive
 841              		.section	.text.CapSense_CSD_CheckIsWidgetActive,"ax",%progbits
 842              		.align	2
 843              		.global	CapSense_CSD_CheckIsWidgetActive
 844              		.thumb
 845              		.thumb_func
 846              		.type	CapSense_CSD_CheckIsWidgetActive, %function
 847              	CapSense_CSD_CheckIsWidgetActive:
 848              	.LFB7:
 626:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 27


 627:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
 628:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** /*******************************************************************************
 629:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Function Name: CapSense_CSD_CheckIsWidgetActive
 630:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** ********************************************************************************
 631:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 632:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Summary:
 633:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  Use function CapSense_CSD_CheckIsSensorActive() to update 
 634:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  CapSense_CSD_sensorOnMask[] for all sensors within the widget.
 635:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  If one of sensors within widget is active the function return that widget is 
 636:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  active.
 637:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  The touch pad and matrix buttons widgets need to have active sensor within 
 638:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  col and row to return widget active status.
 639:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 640:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Parameters:
 641:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  widget:  widget number.
 642:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 643:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Return:
 644:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  Returns widget sensor state 1 if one or more sensors within widget is/are 
 645:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  active, 0 if all sensors within widget are inactive.
 646:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 647:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Reentrant:
 648:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  No
 649:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 650:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *******************************************************************************/
 651:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** uint8 CapSense_CSD_CheckIsWidgetActive(uint8 widget)
 652:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                  
 653:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** {
 849              		.loc 1 653 0
 850              		.cfi_startproc
 851              		@ args = 0, pretend = 0, frame = 16
 852              		@ frame_needed = 1, uses_anonymous_args = 0
 853 0000 80B5     		push	{r7, lr}
 854              		.cfi_def_cfa_offset 8
 855              		.cfi_offset 7, -8
 856              		.cfi_offset 14, -4
 857 0002 84B0     		sub	sp, sp, #16
 858              		.cfi_def_cfa_offset 24
 859 0004 00AF     		add	r7, sp, #0
 860              		.cfi_def_cfa_register 7
 861 0006 0346     		mov	r3, r0
 862 0008 FB71     		strb	r3, [r7, #7]
 654:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     uint8 rawIndex = CapSense_CSD_rawDataIndex[widget];
 863              		.loc 1 654 0
 864 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 865 000c 0F4A     		ldr	r2, .L49
 866 000e D35C     		ldrb	r3, [r2, r3]
 867 0010 FB73     		strb	r3, [r7, #15]
 655:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     uint8 numberOfSensors = CapSense_CSD_numberOfSensors[widget] + rawIndex;
 868              		.loc 1 655 0
 869 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 870 0014 0E4A     		ldr	r2, .L49+4
 871 0016 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 872 0018 FB7B     		ldrb	r3, [r7, #15]
 873 001a 1344     		add	r3, r3, r2
 874 001c 7B73     		strb	r3, [r7, #13]
 656:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     uint8 state = 0u;
 875              		.loc 1 656 0
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 28


 876 001e 0023     		movs	r3, #0
 877 0020 BB73     		strb	r3, [r7, #14]
 878              	.L47:
 657:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
 658:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     /* Check all sensors of the widget */
 659:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     do
 660:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     {
 661:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         if(CapSense_CSD_CheckIsSensorActive(rawIndex) != 0u)
 879              		.loc 1 661 0
 880 0022 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 881 0024 1846     		mov	r0, r3
 882 0026 FFF7FEFF 		bl	CapSense_CSD_CheckIsSensorActive
 883 002a 0346     		mov	r3, r0
 884 002c 002B     		cmp	r3, #0
 885 002e 01D0     		beq	.L46
 662:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         {
 663:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             state = CapSense_CSD_SENSOR_1_IS_ACTIVE;
 886              		.loc 1 663 0
 887 0030 0123     		movs	r3, #1
 888 0032 BB73     		strb	r3, [r7, #14]
 889              	.L46:
 664:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         }
 665:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         rawIndex++;
 890              		.loc 1 665 0
 891 0034 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 892 0036 0133     		adds	r3, r3, #1
 893 0038 FB73     		strb	r3, [r7, #15]
 666:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     }
 667:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     while(rawIndex < numberOfSensors);
 894              		.loc 1 667 0
 895 003a FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 896 003c 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 897 003e 9A42     		cmp	r2, r3
 898 0040 EFD3     		bcc	.L47
 668:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     
 669:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
 670:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     
 671:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     return (state);
 899              		.loc 1 671 0
 900 0042 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 672:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** }
 901              		.loc 1 672 0
 902 0044 1846     		mov	r0, r3
 903 0046 1037     		adds	r7, r7, #16
 904              		.cfi_def_cfa_offset 8
 905 0048 BD46     		mov	sp, r7
 906              		.cfi_def_cfa_register 13
 907              		@ sp needed
 908 004a 80BD     		pop	{r7, pc}
 909              	.L50:
 910              		.align	2
 911              	.L49:
 912 004c 00000000 		.word	CapSense_CSD_rawDataIndex
 913 0050 00000000 		.word	CapSense_CSD_numberOfSensors
 914              		.cfi_endproc
 915              	.LFE7:
 916              		.size	CapSense_CSD_CheckIsWidgetActive, .-CapSense_CSD_CheckIsWidgetActive
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 29


 917              		.section	.text.CapSense_CSD_CheckIsAnyWidgetActive,"ax",%progbits
 918              		.align	2
 919              		.global	CapSense_CSD_CheckIsAnyWidgetActive
 920              		.thumb
 921              		.thumb_func
 922              		.type	CapSense_CSD_CheckIsAnyWidgetActive, %function
 923              	CapSense_CSD_CheckIsAnyWidgetActive:
 924              	.LFB8:
 673:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
 674:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
 675:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** /*******************************************************************************
 676:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Function Name: CapSense_CSD_CheckIsAnyWidgetActive
 677:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** ********************************************************************************
 678:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 679:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Summary:
 680:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  Compares all sensors of the CapSense_CSD_signal[] array to their finger 
 681:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  threshold. Calls CapSense_CSD_CheckIsWidgetActive() for each widget so 
 682:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  the CapSense_CSD_SensorOnMask[] array is up to date after calling this 
 683:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  function.
 684:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 685:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Parameters:
 686:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  widget:  widget number.
 687:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 688:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Return:
 689:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  Returns 1 if any widget is active, 0 none of widgets are active.
 690:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 691:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Reentrant:
 692:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  No
 693:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 694:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *******************************************************************************/
 695:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** uint8 CapSense_CSD_CheckIsAnyWidgetActive(void)
 696:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                  
 697:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** {
 925              		.loc 1 697 0
 926              		.cfi_startproc
 927              		@ args = 0, pretend = 0, frame = 8
 928              		@ frame_needed = 1, uses_anonymous_args = 0
 929 0000 80B5     		push	{r7, lr}
 930              		.cfi_def_cfa_offset 8
 931              		.cfi_offset 7, -8
 932              		.cfi_offset 14, -4
 933 0002 82B0     		sub	sp, sp, #8
 934              		.cfi_def_cfa_offset 16
 935 0004 00AF     		add	r7, sp, #0
 936              		.cfi_def_cfa_register 7
 698:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     uint8 i;
 699:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     uint8 state = 0u;
 937              		.loc 1 699 0
 938 0006 0023     		movs	r3, #0
 939 0008 BB71     		strb	r3, [r7, #6]
 700:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     
 701:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     for(i = 0u; i < CapSense_CSD_TOTAL_WIDGET_COUNT; i++)
 940              		.loc 1 701 0
 941 000a 0023     		movs	r3, #0
 942 000c FB71     		strb	r3, [r7, #7]
 943 000e 0BE0     		b	.L52
 944              	.L54:
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 30


 702:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     {
 703:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         if (CapSense_CSD_CheckIsWidgetActive(i) != 0u)
 945              		.loc 1 703 0
 946 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 947 0012 1846     		mov	r0, r3
 948 0014 FFF7FEFF 		bl	CapSense_CSD_CheckIsWidgetActive
 949 0018 0346     		mov	r3, r0
 950 001a 002B     		cmp	r3, #0
 951 001c 01D0     		beq	.L53
 704:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         {
 705:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             state = CapSense_CSD_WIDGET_IS_ACTIVE;
 952              		.loc 1 705 0
 953 001e 0123     		movs	r3, #1
 954 0020 BB71     		strb	r3, [r7, #6]
 955              	.L53:
 701:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     {
 956              		.loc 1 701 0 discriminator 2
 957 0022 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 958 0024 0133     		adds	r3, r3, #1
 959 0026 FB71     		strb	r3, [r7, #7]
 960              	.L52:
 701:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     {
 961              		.loc 1 701 0 is_stmt 0 discriminator 1
 962 0028 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 963 002a 012B     		cmp	r3, #1
 964 002c F0D9     		bls	.L54
 706:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         }
 707:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     }
 708:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     
 709:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
 710:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     return (state);
 965              		.loc 1 710 0 is_stmt 1
 966 002e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 711:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** }
 967              		.loc 1 711 0
 968 0030 1846     		mov	r0, r3
 969 0032 0837     		adds	r7, r7, #8
 970              		.cfi_def_cfa_offset 8
 971 0034 BD46     		mov	sp, r7
 972              		.cfi_def_cfa_register 13
 973              		@ sp needed
 974 0036 80BD     		pop	{r7, pc}
 975              		.cfi_endproc
 976              	.LFE8:
 977              		.size	CapSense_CSD_CheckIsAnyWidgetActive, .-CapSense_CSD_CheckIsAnyWidgetActive
 978              		.section	.text.CapSense_CSD_EnableWidget,"ax",%progbits
 979              		.align	2
 980              		.global	CapSense_CSD_EnableWidget
 981              		.thumb
 982              		.thumb_func
 983              		.type	CapSense_CSD_EnableWidget, %function
 984              	CapSense_CSD_EnableWidget:
 985              	.LFB9:
 712:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
 713:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
 714:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** /*******************************************************************************
 715:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Function Name: CapSense_CSD_EnableWidget
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 31


 716:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** ********************************************************************************
 717:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 718:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Summary:
 719:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  Enable all widget elements (sensors) to scanning process.
 720:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 721:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Parameters:
 722:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  widget:  widget number.
 723:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 724:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Return:
 725:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  None
 726:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 727:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Global Variables:
 728:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  CapSense_CSD_sensorEnableMask[] - used to store the sensor scanning 
 729:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  state.
 730:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  CapSense_CSD_sensorEnableMask[0] contains the masked bits for sensors 
 731:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
 732:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  CapSense_CSD_sensorEnableMask[1] contains the masked bits for 
 733:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  sensors 8 through 15 (if needed), and so on.
 734:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  0 - sensor doesn't scan by CapSense_CSD_ScanEnabledWidgets().
 735:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  1 - sensor scans by CapSense_CSD_ScanEnabledWidgets().
 736:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 737:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Reentrant:
 738:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  No
 739:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 740:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *******************************************************************************/
 741:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** void CapSense_CSD_EnableWidget(uint8 widget)
 742:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                    
 743:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** {
 986              		.loc 1 743 0
 987              		.cfi_startproc
 988              		@ args = 0, pretend = 0, frame = 16
 989              		@ frame_needed = 1, uses_anonymous_args = 0
 990              		@ link register save eliminated.
 991 0000 80B4     		push	{r7}
 992              		.cfi_def_cfa_offset 4
 993              		.cfi_offset 7, -4
 994 0002 85B0     		sub	sp, sp, #20
 995              		.cfi_def_cfa_offset 24
 996 0004 00AF     		add	r7, sp, #0
 997              		.cfi_def_cfa_register 7
 998 0006 0346     		mov	r3, r0
 999 0008 FB71     		strb	r3, [r7, #7]
 744:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     uint8 pos;
 745:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     uint8 enMask;
 746:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     uint8 rawIndex = CapSense_CSD_rawDataIndex[widget];
 1000              		.loc 1 746 0
 1001 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1002 000c 134A     		ldr	r2, .L58
 1003 000e D35C     		ldrb	r3, [r2, r3]
 1004 0010 FB73     		strb	r3, [r7, #15]
 747:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     uint8 numberOfSensors = CapSense_CSD_numberOfSensors[widget] + rawIndex;
 1005              		.loc 1 747 0
 1006 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1007 0014 124A     		ldr	r2, .L58+4
 1008 0016 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 1009 0018 FB7B     		ldrb	r3, [r7, #15]
 1010 001a 1344     		add	r3, r3, r2
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 32


 1011 001c BB73     		strb	r3, [r7, #14]
 1012              	.L57:
 748:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     
 749:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     /* Enable all sensors of the widget */
 750:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     do
 751:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     {
 752:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         pos = (rawIndex >> 3u);
 1013              		.loc 1 752 0 discriminator 1
 1014 001e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1015 0020 DB08     		lsrs	r3, r3, #3
 1016 0022 7B73     		strb	r3, [r7, #13]
 753:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         enMask = 0x01u << (rawIndex & 0x07u);
 1017              		.loc 1 753 0 discriminator 1
 1018 0024 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1019 0026 03F00703 		and	r3, r3, #7
 1020 002a 0122     		movs	r2, #1
 1021 002c 02FA03F3 		lsl	r3, r2, r3
 1022 0030 3B73     		strb	r3, [r7, #12]
 754:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         
 755:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         CapSense_CSD_sensorEnableMask[pos] |= enMask;
 1023              		.loc 1 755 0 discriminator 1
 1024 0032 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 1025 0034 7A7B     		ldrb	r2, [r7, #13]	@ zero_extendqisi2
 1026 0036 0B49     		ldr	r1, .L58+8
 1027 0038 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 1028 003a 3A7B     		ldrb	r2, [r7, #12]
 1029 003c 0A43     		orrs	r2, r2, r1
 1030 003e D1B2     		uxtb	r1, r2
 1031 0040 084A     		ldr	r2, .L58+8
 1032 0042 D154     		strb	r1, [r2, r3]
 756:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         rawIndex++;
 1033              		.loc 1 756 0 discriminator 1
 1034 0044 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1035 0046 0133     		adds	r3, r3, #1
 1036 0048 FB73     		strb	r3, [r7, #15]
 757:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     }
 758:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     while(rawIndex < numberOfSensors);
 1037              		.loc 1 758 0 discriminator 1
 1038 004a FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1039 004c BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 1040 004e 9A42     		cmp	r2, r3
 1041 0050 E5D3     		bcc	.L57
 759:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     
 760:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
 761:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** }
 1042              		.loc 1 761 0
 1043 0052 00BF     		nop
 1044 0054 1437     		adds	r7, r7, #20
 1045              		.cfi_def_cfa_offset 4
 1046 0056 BD46     		mov	sp, r7
 1047              		.cfi_def_cfa_register 13
 1048              		@ sp needed
 1049 0058 80BC     		pop	{r7}
 1050              		.cfi_restore 7
 1051              		.cfi_def_cfa_offset 0
 1052 005a 7047     		bx	lr
 1053              	.L59:
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 33


 1054              		.align	2
 1055              	.L58:
 1056 005c 00000000 		.word	CapSense_CSD_rawDataIndex
 1057 0060 00000000 		.word	CapSense_CSD_numberOfSensors
 1058 0064 00000000 		.word	CapSense_CSD_sensorEnableMask
 1059              		.cfi_endproc
 1060              	.LFE9:
 1061              		.size	CapSense_CSD_EnableWidget, .-CapSense_CSD_EnableWidget
 1062              		.section	.text.CapSense_CSD_DisableWidget,"ax",%progbits
 1063              		.align	2
 1064              		.global	CapSense_CSD_DisableWidget
 1065              		.thumb
 1066              		.thumb_func
 1067              		.type	CapSense_CSD_DisableWidget, %function
 1068              	CapSense_CSD_DisableWidget:
 1069              	.LFB10:
 762:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
 763:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
 764:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** /*******************************************************************************
 765:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Function Name: CapSense_CSD_DisableWidget
 766:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** ********************************************************************************
 767:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 768:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Summary:
 769:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  Disable all widget elements (sensors) from scanning process.
 770:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 771:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Parameters:
 772:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  widget:  widget number.
 773:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 774:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Return:
 775:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  None
 776:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 777:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Global Variables:
 778:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  CapSense_CSD_sensorEnableMask[] - used to store the sensor scanning 
 779:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  state.
 780:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  CapSense_CSD_sensorEnableMask[0] contains the masked bits for sensors 
 781:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  0 through 7 (sensor 0 is bit 0, sensor 1 is bit 1).
 782:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  CapSense_CSD_sensorEnableMask[1] contains the masked bits for 
 783:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  sensors 8 through 15 (if needed), and so on.
 784:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  0 - sensor doesn't scan by CapSense_CSD_ScanEnabledWidgets().
 785:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  1 - sensor scans by CapSense_CSD_ScanEnabledWidgets().
 786:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 787:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** * Reentrant:
 788:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *  No
 789:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *
 790:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** *******************************************************************************/
 791:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** void CapSense_CSD_DisableWidget(uint8 widget)
 792:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                     
 793:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** {
 1070              		.loc 1 793 0
 1071              		.cfi_startproc
 1072              		@ args = 0, pretend = 0, frame = 16
 1073              		@ frame_needed = 1, uses_anonymous_args = 0
 1074              		@ link register save eliminated.
 1075 0000 80B4     		push	{r7}
 1076              		.cfi_def_cfa_offset 4
 1077              		.cfi_offset 7, -4
 1078 0002 85B0     		sub	sp, sp, #20
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 34


 1079              		.cfi_def_cfa_offset 24
 1080 0004 00AF     		add	r7, sp, #0
 1081              		.cfi_def_cfa_register 7
 1082 0006 0346     		mov	r3, r0
 1083 0008 FB71     		strb	r3, [r7, #7]
 794:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     uint8 pos;
 795:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     uint8 enMask;
 796:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     uint8 rawIndex = CapSense_CSD_rawDataIndex[widget];
 1084              		.loc 1 796 0
 1085 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1086 000c 144A     		ldr	r2, .L62
 1087 000e D35C     		ldrb	r3, [r2, r3]
 1088 0010 FB73     		strb	r3, [r7, #15]
 797:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     uint8 numberOfSensors = CapSense_CSD_numberOfSensors[widget] + rawIndex;
 1089              		.loc 1 797 0
 1090 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1091 0014 134A     		ldr	r2, .L62+4
 1092 0016 D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 1093 0018 FB7B     		ldrb	r3, [r7, #15]
 1094 001a 1344     		add	r3, r3, r2
 1095 001c BB73     		strb	r3, [r7, #14]
 1096              	.L61:
 798:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****    
 799:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     /* Disable all sensors of the widget */
 800:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     do
 801:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     {
 802:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         pos = (rawIndex >> 3u);
 1097              		.loc 1 802 0 discriminator 1
 1098 001e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1099 0020 DB08     		lsrs	r3, r3, #3
 1100 0022 7B73     		strb	r3, [r7, #13]
 803:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         enMask = 0x01u << (rawIndex & 0x07u);
 1101              		.loc 1 803 0 discriminator 1
 1102 0024 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1103 0026 03F00703 		and	r3, r3, #7
 1104 002a 0122     		movs	r2, #1
 1105 002c 02FA03F3 		lsl	r3, r2, r3
 1106 0030 3B73     		strb	r3, [r7, #12]
 804:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         
 805:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         CapSense_CSD_sensorEnableMask[pos] &= (uint8)~enMask;
 1107              		.loc 1 805 0 discriminator 1
 1108 0032 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 1109 0034 7A7B     		ldrb	r2, [r7, #13]	@ zero_extendqisi2
 1110 0036 0C49     		ldr	r1, .L62+8
 1111 0038 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 1112 003a 3A7B     		ldrb	r2, [r7, #12]
 1113 003c D243     		mvns	r2, r2
 1114 003e D2B2     		uxtb	r2, r2
 1115 0040 0A40     		ands	r2, r2, r1
 1116 0042 D1B2     		uxtb	r1, r2
 1117 0044 084A     		ldr	r2, .L62+8
 1118 0046 D154     		strb	r1, [r2, r3]
 806:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         rawIndex++;
 1119              		.loc 1 806 0 discriminator 1
 1120 0048 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1121 004a 0133     		adds	r3, r3, #1
 1122 004c FB73     		strb	r3, [r7, #15]
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 35


 807:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     }
 808:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     while(rawIndex < numberOfSensors);
 1123              		.loc 1 808 0 discriminator 1
 1124 004e FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1125 0050 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 1126 0052 9A42     		cmp	r2, r3
 1127 0054 E3D3     		bcc	.L61
 809:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     
 810:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
 811:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** }
 1128              		.loc 1 811 0
 1129 0056 00BF     		nop
 1130 0058 1437     		adds	r7, r7, #20
 1131              		.cfi_def_cfa_offset 4
 1132 005a BD46     		mov	sp, r7
 1133              		.cfi_def_cfa_register 13
 1134              		@ sp needed
 1135 005c 80BC     		pop	{r7}
 1136              		.cfi_restore 7
 1137              		.cfi_def_cfa_offset 0
 1138 005e 7047     		bx	lr
 1139              	.L63:
 1140              		.align	2
 1141              	.L62:
 1142 0060 00000000 		.word	CapSense_CSD_rawDataIndex
 1143 0064 00000000 		.word	CapSense_CSD_numberOfSensors
 1144 0068 00000000 		.word	CapSense_CSD_sensorEnableMask
 1145              		.cfi_endproc
 1146              	.LFE10:
 1147              		.size	CapSense_CSD_DisableWidget, .-CapSense_CSD_DisableWidget
 1148              		.section	.text.CapSense_CSD_MedianFilter,"ax",%progbits
 1149              		.align	2
 1150              		.global	CapSense_CSD_MedianFilter
 1151              		.thumb
 1152              		.thumb_func
 1153              		.type	CapSense_CSD_MedianFilter, %function
 1154              	CapSense_CSD_MedianFilter:
 1155              	.LFB11:
 812:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** #if(CapSense_CSD_TOTAL_CENTROIDS_COUNT)
 813:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     /*******************************************************************************
 814:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     * Function Name: CapSense_CSD_FindMaximum
 815:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     ********************************************************************************
 816:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *
 817:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     * Summary:
 818:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  Finds index of maximum element within defined centroid. Checks 
 819:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  CapSense_CSD_SensorSignal[] within defined cenrtoid and 
 820:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  returns index of maximum element. The values below finger threshold are 
 821:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  ignored.
 822:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  The centrod defines by offset of first element and number of elements - count.
 823:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  The diplexed centroid requires at least consecutive two elements above
 824:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  FingerThreshold to find index of maximum element.
 825:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     * 
 826:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     * Parameters:
 827:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  offset:  Start index of cetroid in CapSense_CSD_sensorSignal[] array.
 828:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  count:   number of elements within centroid.
 829:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  fingerThreshold:  Finger threshould.
 830:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  diplex:   pointer to diplex table.
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 36


 831:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     * 
 832:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     * Return:
 833:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  Returns index of maximum element within defined centroid.
 834:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  If index of maximum element doesn't find the 0xFF returns.
 835:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     * 
 836:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *******************************************************************************/
 837:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     #if (CapSense_CSD_IS_DIPLEX_SLIDER)
 838:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         uint8 CapSense_CSD_FindMaximum(uint8 offset, uint8 count, uint16 fingerThreshold, const uin
 839:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 	                                       
 840:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     #else 
 841:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         uint8 CapSense_CSD_FindMaximum(uint8 offset, uint8 count, uint16 fingerThreshold)
 842:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 	                                       
 843:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     #endif /* (CapSense_CSD_IS_DIPLEX_SLIDER) */
 844:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     {
 845:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         uint8 i;
 846:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         #if (CapSense_CSD_IS_DIPLEX_SLIDER)        
 847:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             uint8 curPos = 0u;
 848:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             /* No centroid at the Start */
 849:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             uint8 curCntrdSize = 0u;
 850:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             uint8 curCtrdStartPos = 0xFFu;
 851:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             /* The biggset centroid is zero */
 852:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             uint8 biggestCtrdSize = 0u;
 853:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             uint8 biggestCtrdStartPos = 0u;
 854:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         #endif /* (CapSense_CSD_IS_DIPLEX_SLIDER) */
 855:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         uint8 maximum = 0xFFu;
 856:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         uint16 temp = 0u;
 857:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         uint16 *startOfSlider = &CapSense_CSD_sensorSignal[offset]; 
 858:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
 859:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         #if (CapSense_CSD_IS_DIPLEX_SLIDER)        
 860:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             if(diplex != 0u)
 861:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             {
 862:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 /* Initialize */
 863:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 i = 0u;
 864:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 
 865:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 /* Make slider x2 as Diplexed */
 866:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 count <<= 1u;
 867:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 while(1u)
 868:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 { 
 869:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     if (startOfSlider[curPos] > 0u)    /* Looking for centroids */
 870:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     {
 871:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         if (curCtrdStartPos == 0xFFu)
 872:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         {
 873:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             /* Start of centroid */
 874:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             curCtrdStartPos = i;
 875:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             curCntrdSize++;
 876:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         }
 877:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         else
 878:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         {
 879:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             curCntrdSize++;
 880:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         }
 881:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     }
 882:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     else   /* Select the bigest and indicate zero start */
 883:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     {          
 884:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         if(curCntrdSize > 0u)
 885:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         {
 886:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             /* We are in the end of current */
 887:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             if(curCntrdSize > biggestCtrdSize)
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 37


 888:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             {
 889:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 biggestCtrdSize = curCntrdSize;
 890:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 biggestCtrdStartPos = curCtrdStartPos;
 891:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             }
 892:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             
 893:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             curCntrdSize = 0u;
 894:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             curCtrdStartPos = 0xFFu;
 895:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         }
 896:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     }
 897:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     
 898:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     i++; 
 899:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     curPos = diplex[i];
 900:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     if(i == count)
 901:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     {
 902:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         break;
 903:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     }            
 904:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 }
 905:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     
 906:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     /* Find the biggest centroid if two are the same size, last one wins
 907:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                        We are in the end of current */
 908:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 if (curCntrdSize >= biggestCtrdSize) 
 909:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 {
 910:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     biggestCtrdSize = curCntrdSize;
 911:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     biggestCtrdStartPos = curCtrdStartPos;
 912:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 }
 913:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             }
 914:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             else
 915:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             {
 916:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 /* Without diplexing */ 
 917:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 biggestCtrdSize = count;
 918:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             }
 919:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         
 920:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
 921:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             /* Check centroid size */
 922:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             #if (CapSense_CSD_IS_NON_DIPLEX_SLIDER)
 923:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 if((biggestCtrdSize >= 2u) || ((biggestCtrdSize == 1u) && (diplex == 0u)))
 924:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             #else                    
 925:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 if(biggestCtrdSize >= 2u)
 926:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             #endif /* (CapSense_CSD_IS_NON_DIPLEX_SLIDER) */
 927:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 {
 928:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     for (i = biggestCtrdStartPos; i < (biggestCtrdStartPos + biggestCtrdSize); i++)
 929:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     {
 930:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         #if (CapSense_CSD_IS_DIPLEX_SLIDER && CapSense_CSD_IS_NON_DIPLEX_SLIDER)
 931:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             if (diplex == 0u)
 932:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             {
 933:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 curPos = i;
 934:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             }
 935:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             else
 936:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             {
 937:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 curPos = diplex[i];
 938:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             }                    
 939:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         #elif (CapSense_CSD_IS_DIPLEX_SLIDER)                    
 940:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             curPos = diplex[i];                    
 941:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         #endif /* (CapSense_CSD_IS_DIPLEX_SLIDER && CapSense_CSD_IS_NON_DIPLEX_SLID
 942:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         /* Looking for the grater element within centroid */
 943:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         if(startOfSlider[curPos] > fingerThreshold)
 944:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         {
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 38


 945:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             if(startOfSlider[curPos] > temp)
 946:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             {
 947:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 maximum = i;
 948:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 temp = startOfSlider[curPos];
 949:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             }
 950:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         }
 951:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     }
 952:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 } 
 953:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         #else
 954:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             for (i = 0u; i < count; i++)
 955:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             {                      
 956:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 /* Looking for the grater element within centroid */
 957:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 if(startOfSlider[i] > fingerThreshold)
 958:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 {
 959:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     if(startOfSlider[i] > temp)
 960:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     {
 961:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         maximum = i;
 962:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         temp = startOfSlider[i];
 963:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     }
 964:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 }
 965:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             }    
 966:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         #endif /* (CapSense_CSD_IS_DIPLEX_SLIDER) */
 967:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         return (maximum);
 968:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     }
 969:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     
 970:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     
 971:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     /*******************************************************************************
 972:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     * Function Name: CapSense_CSD_CalcCentroid
 973:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     ********************************************************************************
 974:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *
 975:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     * Summary:
 976:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  Returns position value calculated accoring index of maximum element and API
 977:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  resolution.
 978:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *
 979:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     * Parameters:
 980:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  type:  widget type.
 981:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  diplex:  pointer to diplex table.
 982:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  maximum:  Index of maximum element within centroid.
 983:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  offset:   Start index of cetroid in CapSense_CSD_SensorSignal[] array.
 984:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  count:    Number of elements within centroid.
 985:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  resolution:  multiplicator calculated according to centroid type and
 986:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  API resolution.
 987:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  noiseThreshold:  Noise threshould.
 988:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     * 
 989:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     * Return:
 990:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  Returns position value of the slider.
 991:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     * 
 992:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *
 993:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     * Reentrant:
 994:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  No.
 995:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *
 996:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *******************************************************************************/
 997:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     uint8 CapSense_CSD_CalcCentroid(uint8 maximum, uint8 offset, 
 998:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                         uint8 count, uint16 resolution, uint16 noiseThreshold)
 999:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 	                                    
1000:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     {
1001:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         #if ((CapSense_CSD_TOTAL_LINEAR_SLIDERS_COUNT > 0u) || (CapSense_CSD_TOTAL_TOUCH_PADS_COUNT
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 39


1002:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             uint8 posPrev = 0u;
1003:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             uint8 posNext = 0u;
1004:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         #endif /* ((CapSense_CSD_TOTAL_LINEAR_SLIDERS_COUNT>0u) || (CapSense_CSD_TOTAL_TOUCH_PADS_C
1005:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                
1006:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         #if (CapSense_CSD_IS_DIPLEX_SLIDER)                
1007:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             uint8 pos;
1008:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         #endif /* (CapSense_CSD_IS_DIPLEX_SLIDER) */
1009:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         
1010:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         /* Helps while centroid calulation */
1011:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         static uint16 CapSense_CSD_centroid[3u];
1012:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1013:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         uint8 position;
1014:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         uint32 numerator;
1015:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         int32 denominator;
1016:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         uint16 *startOfSlider = &CapSense_CSD_sensorSignal[offset];
1017:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     
1018:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         #if (CapSense_CSD_ADD_SLIDER_TYPE)
1019:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             if(type == CapSense_CSD_TYPE_RADIAL_SLIDER)
1020:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             {
1021:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         #endif /* (CapSense_CSD_ADD_SLIDER_TYPE) */
1022:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1023:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             #if (CapSense_CSD_TOTAL_RADIAL_SLIDERS_COUNT > 0u)                
1024:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 /* Copy Signal for found centriod */
1025:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 CapSense_CSD_centroid[CapSense_CSD_POS] = startOfSlider[maximum];
1026:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                  
1027:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 /* Check borders for ROTARY Slider */
1028:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 if (maximum == 0u)                   /* Start of centroid */
1029:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 { 
1030:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     CapSense_CSD_centroid[CapSense_CSD_POS_PREV] = startOfSlider[count - 1u];
1031:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     CapSense_CSD_centroid[CapSense_CSD_POS_NEXT] = startOfSlider[1u];
1032:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 }
1033:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 else if (maximum == (count - 1u))    /* End of centroid */
1034:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 {
1035:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     CapSense_CSD_centroid[CapSense_CSD_POS_PREV] = startOfSlider[maximum - 1u];
1036:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     CapSense_CSD_centroid[CapSense_CSD_POS_NEXT] = startOfSlider[0u];
1037:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 }
1038:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 else                                /* Not first Not last */
1039:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 {
1040:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     CapSense_CSD_centroid[CapSense_CSD_POS_PREV] = startOfSlider[maximum - 1u];
1041:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     CapSense_CSD_centroid[CapSense_CSD_POS_NEXT] = startOfSlider[maximum + 1u];
1042:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 }
1043:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             #endif /* (CapSense_CSD_TOTAL_RADIAL_SLIDERS_COUNT > 0u) */
1044:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1045:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         #if (CapSense_CSD_ADD_SLIDER_TYPE)
1046:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             }
1047:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             else
1048:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             {
1049:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         #endif /* (CapSense_CSD_ADD_SLIDER_TYPE) */
1050:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1051:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             #if ((CapSense_CSD_TOTAL_LINEAR_SLIDERS_COUNT > 0u) || (CapSense_CSD_TOTAL_TOUCH_PADS_C
1052:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 #if (CapSense_CSD_IS_DIPLEX_SLIDER && CapSense_CSD_IS_NON_DIPLEX_SLIDER)           
1053:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     /* Calculate next and previous near to maximum */
1054:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     if(diplex == 0u)
1055:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     {
1056:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         pos     = maximum;
1057:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         posPrev = maximum - 1u;
1058:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         posNext = maximum + 1u; 
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 40


1059:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     }
1060:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     else
1061:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     {
1062:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         pos     = diplex[maximum];
1063:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         posPrev = diplex[maximum - 1u];
1064:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         posNext = diplex[maximum + 1u];
1065:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         count <<= 1u;
1066:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     }                    
1067:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 #elif (CapSense_CSD_IS_DIPLEX_SLIDER)
1068:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     /* Calculate next and previous near to maximum */
1069:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     pos     = diplex[maximum];
1070:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     posPrev = diplex[maximum - 1u];
1071:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     posNext = diplex[maximum + 1u];
1072:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     count <<= 1u;                    
1073:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 #else                    
1074:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     /* Calculate next and previous near to maximum */
1075:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     if (maximum >= 1u)
1076:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     {
1077:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         posPrev = maximum - 1u;
1078:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     }
1079:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     posNext = maximum + 1u; 
1080:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 #endif /* (CapSense_CSD_IS_DIPLEX_SLIDER && CapSense_CSD_IS_NON_DIPLEX_SLIDER) */
1081:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         
1082:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 /* Copy Signal for found centriod */
1083:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 #if (CapSense_CSD_IS_DIPLEX_SLIDER)
1084:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     CapSense_CSD_centroid[CapSense_CSD_POS] = startOfSlider[pos];
1085:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 #else
1086:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     CapSense_CSD_centroid[CapSense_CSD_POS] = startOfSlider[maximum];
1087:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 #endif /* (CapSense_CSD_IS_DIPLEX_SLIDER) */
1088:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     
1089:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 /* Check borders for LINEAR Slider */
1090:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 if (maximum == 0u)                   /* Start of centroid */
1091:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 { 
1092:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     CapSense_CSD_centroid[CapSense_CSD_POS_PREV] = 0u;
1093:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     CapSense_CSD_centroid[CapSense_CSD_POS_NEXT] = startOfSlider[posNext];
1094:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 }
1095:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 else if (maximum == ((count) - 1u)) /* End of centroid */
1096:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 {
1097:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     CapSense_CSD_centroid[CapSense_CSD_POS_PREV] = startOfSlider[posPrev];
1098:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     CapSense_CSD_centroid[CapSense_CSD_POS_NEXT] = 0u;
1099:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 }
1100:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 else                                /* Not first Not last */
1101:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 {
1102:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     CapSense_CSD_centroid[CapSense_CSD_POS_PREV] = startOfSlider[posPrev];
1103:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     CapSense_CSD_centroid[CapSense_CSD_POS_NEXT] = startOfSlider[posNext];
1104:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 }
1105:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             #endif /* ((CapSense_CSD_TOTAL_LINEAR_SLIDERS_COUNT>0u)||(CapSense_CSD_TOTAL_TOUCH_PADS
1106:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1107:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         #if (CapSense_CSD_ADD_SLIDER_TYPE)
1108:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             }
1109:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         #endif /* (CapSense_CSD_ADD_SLIDER_TYPE) */
1110:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     
1111:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         /* Subtract noiseThreshold */
1112:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         if(CapSense_CSD_centroid[CapSense_CSD_POS_PREV] > noiseThreshold)
1113:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         {
1114:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             CapSense_CSD_centroid[CapSense_CSD_POS_PREV] -= noiseThreshold;
1115:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         }
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 41


1116:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         else
1117:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         {
1118:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             CapSense_CSD_centroid[CapSense_CSD_POS_PREV] = 0u;
1119:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         }
1120:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         
1121:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         /* Maximum always grater than fingerThreshold, so grate than noiseThreshold */
1122:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         CapSense_CSD_centroid[CapSense_CSD_POS] -= noiseThreshold;
1123:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         
1124:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         /* Subtract noiseThreshold */
1125:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         if(CapSense_CSD_centroid[CapSense_CSD_POS_NEXT] > noiseThreshold)
1126:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         {
1127:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             CapSense_CSD_centroid[CapSense_CSD_POS_NEXT] -= noiseThreshold;
1128:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         }
1129:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         else
1130:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         {
1131:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             CapSense_CSD_centroid[CapSense_CSD_POS_NEXT] = 0u;
1132:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         }
1133:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         
1134:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         
1135:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         /* Si+1 - Si-1 */
1136:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         numerator = (uint32) CapSense_CSD_centroid[CapSense_CSD_POS_NEXT] -
1137:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     (uint32) CapSense_CSD_centroid[CapSense_CSD_POS_PREV];
1138:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1139:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         /* Si+1 + Si + Si-1 */
1140:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         denominator = (int32) CapSense_CSD_centroid[CapSense_CSD_POS_PREV] + 
1141:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                       (int32) CapSense_CSD_centroid[CapSense_CSD_POS] + 
1142:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                       (int32) CapSense_CSD_centroid[CapSense_CSD_POS_NEXT];
1143:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         
1144:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         /* (numerator/denominator) + maximum */
1145:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         denominator = (((int32)(uint32)((uint32)numerator << 8u)/denominator) + (int32)(uint32)((ui
1146:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1147:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         #if(CapSense_CSD_TOTAL_RADIAL_SLIDERS_COUNT > 0u)
1148:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             /* Only required for RADIAL Slider */
1149:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             if(denominator < 0)
1150:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             {
1151:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 denominator += (int32)((uint16)((uint16) count << 8u));
1152:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             }
1153:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         #endif /* (CapSense_CSD_TOTAL_RADIAL_SLIDERS_COUNT > 0u) */
1154:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1155:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         denominator *= (int16)resolution;
1156:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1157:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         /* Round the relust and put it to uint8 */
1158:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         position = ((uint8) HI16((uint32)denominator + CapSense_CSD_CENTROID_ROUND_VALUE));
1159:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1160:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         return (position);
1161:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     }    
1162:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** #endif /* (CapSense_CSD_TOTAL_CENTROIDS_COUNT) */
1163:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1164:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1165:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** #if(CapSense_CSD_TOTAL_LINEAR_SLIDERS_COUNT > 0u)
1166:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     /*******************************************************************************
1167:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     * Function Name: CapSense_CSD_GetCentroidPos
1168:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     ********************************************************************************
1169:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *
1170:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     * Summary:
1171:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  Checks the CapSense_CSD_Signal[ ] array for a centroid within
1172:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  slider specified range. The centroid position is calculated to the resolution
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 42


1173:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  specified in the CapSense customizer. The position filters are applied to the
1174:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  result if enabled.
1175:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *
1176:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     * Parameters:
1177:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  widget:  Widget number.
1178:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  For every linear slider widget there are defines in this format:
1179:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  #define CapSense_CSD_LS__"widget_name"            5
1180:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     * 
1181:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     * Return:
1182:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  Returns position value of the linear slider.
1183:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *
1184:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     * Side Effects:
1185:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  If any sensor within the slider widget is active, the function returns values
1186:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  from zero to the API resolution value set in the CapSense customizer. If no
1187:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  sensors are active, the function returns 0xFFFF. If an error occurs during
1188:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  execution of the centroid/diplexing algorithm, the function returns 0xFFFF.
1189:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  There are no checks of widget type argument provided to this function.
1190:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  The unproper widget type provided will cause unexpected position calculations.
1191:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *
1192:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     * Note:
1193:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  If noise counts on the slider segments are greater than the noise
1194:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  threshold, this subroutine may generate a false centroid result. The noise
1195:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  threshold should be set carefully (high enough above the noise level) so
1196:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  that noise will not generate a false centroid.
1197:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *
1198:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     * Reentrant:
1199:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  No.
1200:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *
1201:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *******************************************************************************/
1202:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     uint16 CapSense_CSD_GetCentroidPos(uint8 widget) 
1203:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     {
1204:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         #if (CapSense_CSD_IS_DIPLEX_SLIDER)
1205:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             const uint8 CYCODE *diplex;
1206:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         #endif /* (CapSense_CSD_IS_DIPLEX_SLIDER) */
1207:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 
1208:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         #if (0u != CapSense_CSD_LINEAR_SLIDERS_POS_FILTERS_MASK)
1209:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             uint8 posIndex;
1210:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             uint8 firstTimeIndex = CapSense_CSD_posFiltersData[widget];
1211:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             uint8 posFiltersMask = CapSense_CSD_posFiltersMask[widget];  
1212:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         #endif /* (0u != CapSense_CSD_LINEAR_SLIDERS_POS_FILTERS_MASK) */
1213:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1214:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         #if ((0u != (CapSense_CSD_MEDIAN_FILTER & CapSense_CSD_LINEAR_SLIDERS_POS_FILTERS_MASK)) ||
1215:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****              (0u != (CapSense_CSD_AVERAGING_FILTER & CapSense_CSD_LINEAR_SLIDERS_POS_FILTERS_MASK))
1216:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             uint8 tempPos;
1217:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         #endif /* ((0u != (CapSense_CSD_MEDIAN_FILTER & CapSense_CSD_LINEAR_SLIDERS_POS_FILTERS_MAS
1218:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                *   (0u != (CapSense_CSD_AVERAGING_FILTER & CapSense_CSD_LINEAR_SLIDERS_POS_FILTERS_
1219:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                */
1220:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1221:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         uint8 maximum;
1222:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         uint16 position;
1223:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         uint8 offset = CapSense_CSD_rawDataIndex[widget];
1224:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         uint8 count = CapSense_CSD_numberOfSensors[widget];
1225:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         
1226:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         #if (CapSense_CSD_IS_DIPLEX_SLIDER)
1227:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             if(widget < CapSense_CSD_TOTAL_DIPLEXED_SLIDERS_COUNT)
1228:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             {
1229:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 maximum = CapSense_CSD_diplexTable[widget];
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 43


1230:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 diplex = &CapSense_CSD_diplexTable[maximum];
1231:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             }
1232:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             else
1233:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             {
1234:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 diplex = 0u;
1235:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             }
1236:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         #endif /* (CapSense_CSD_IS_DIPLEX_SLIDER) */
1237:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1238:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         /* Find Maximum within centroid */      
1239:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         #if (CapSense_CSD_IS_DIPLEX_SLIDER)        
1240:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             maximum = CapSense_CSD_FindMaximum(offset, count, CapSense_CSD_fingerThreshold[widget],
1241:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         #else
1242:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             maximum = CapSense_CSD_FindMaximum(offset, count, CapSense_CSD_fingerThreshold[widget])
1243:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         #endif /* (CapSense_CSD_IS_DIPLEX_SLIDER) */
1244:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1245:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         if (maximum != 0xFFu)
1246:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         {
1247:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             /* Calculate centroid */
1248:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             position = (uint16) CapSense_CSD_CalcCentroid(maximum, 
1249:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                          offset, count, CapSense_CSD_centroidMult[widget], CapSense_CSD_noiseThresh
1250:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1251:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             #if (0u != CapSense_CSD_LINEAR_SLIDERS_POS_FILTERS_MASK)
1252:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 /* Check if this linear slider has enabled filters */
1253:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 if (0u != (posFiltersMask & CapSense_CSD_ANY_POS_FILTER))
1254:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 {
1255:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     /* Caluclate position to store filters data */
1256:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     posIndex  = firstTimeIndex + 1u;
1257:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     
1258:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     if (0u == CapSense_CSD_posFiltersData[firstTimeIndex])
1259:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     {
1260:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         /* Init filters */
1261:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         CapSense_CSD_posFiltersData[posIndex] = (uint8) position;
1262:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         #if ((0u != (CapSense_CSD_MEDIAN_FILTER & \
1263:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                      CapSense_CSD_LINEAR_SLIDERS_POS_FILTERS_MASK)) || \
1264:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                              (0u != (CapSense_CSD_AVERAGING_FILTER & \
1265:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                      CapSense_CSD_LINEAR_SLIDERS_POS_FILTERS_MASK)))
1266:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1267:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             if ( (0u != (posFiltersMask & CapSense_CSD_MEDIAN_FILTER)) || 
1268:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                  (0u != (posFiltersMask & CapSense_CSD_AVERAGING_FILTER)) )
1269:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             {
1270:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 CapSense_CSD_posFiltersData[posIndex + 1u] = (uint8) position;
1271:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             }
1272:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         #endif /* ((0u != (CapSense_CSD_MEDIAN_FILTER & \
1273:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                *           CapSense_CSD_LINEAR_SLIDERS_POS_FILTERS_MASK)) || \
1274:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                *   (0u != (CapSense_CSD_AVERAGING_FILTER & \
1275:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                *           CapSense_CSD_LINEAR_SLIDERS_POS_FILTERS_MASK)))
1276:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                */
1277:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         
1278:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         CapSense_CSD_posFiltersData[firstTimeIndex] = 1u;
1279:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     }
1280:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     else
1281:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     {
1282:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         /* Do filtering */
1283:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         #if (0u != (CapSense_CSD_MEDIAN_FILTER & CapSense_CSD_LINEAR_SLIDERS_POS_FI
1284:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_CSD_MEDIAN_FILTER))
1285:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             {
1286:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 tempPos = (uint8) position;
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 44


1287:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 position = CapSense_CSD_MedianFilter(position,
1288:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                                                 (uint16)CapSense_CSD_posFiltersData
1289:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                                                 (uint16)CapSense_CSD_posFiltersData
1290:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 CapSense_CSD_posFiltersData[posIndex + 1u] =
1291:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                                                              CapSense_CSD_posFilter
1292:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 CapSense_CSD_posFiltersData[posIndex] = tempPos;
1293:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             }
1294:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         #endif /*(0u != (CapSense_CSD_MEDIAN_FILTER &
1295:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                *         CapSense_CSD_LINEAR_SLIDERS_POS_FILTERS_MASK))
1296:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                */
1297:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1298:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         #if(0u!=(CapSense_CSD_AVERAGING_FILTER & CapSense_CSD_LINEAR_SLIDERS_POS_FI
1299:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_CSD_AVERAGING_FILTER)) 
1300:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             {
1301:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 tempPos = (uint8) position;
1302:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 position = CapSense_CSD_AveragingFilter(position,
1303:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                                                 (uint16)CapSense_CSD_posFiltersData
1304:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                                                 (uint16)CapSense_CSD_posFiltersData
1305:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 CapSense_CSD_posFiltersData[posIndex+1u]=CapSense_CSD_posFiltersDat
1306:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 CapSense_CSD_posFiltersData[posIndex] = tempPos;
1307:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             }
1308:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         #endif /* (0u != (CapSense_CSD_AVERAGING_FILTER & \
1309:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                *           CapSense_CSD_LINEAR_SLIDERS_POS_FILTERS_MASK))
1310:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                */
1311:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1312:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         #if (0u != (CapSense_CSD_IIR2_FILTER & CapSense_CSD_LINEAR_SLIDERS_POS_FILT
1313:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_CSD_IIR2_FILTER)) 
1314:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             {
1315:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 position = CapSense_CSD_IIR2Filter(position,
1316:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                                                     (uint16)CapSense_CSD_posFilters
1317:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 CapSense_CSD_posFiltersData[posIndex] = (uint8) position;
1318:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             }
1319:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         #endif /* (0u != (CapSense_CSD_IIR2_FILTER & \
1320:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                *          CapSense_CSD_LINEAR_SLIDERS_POS_FILTERS_MASK))
1321:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                */
1322:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1323:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         #if (0u != (CapSense_CSD_IIR4_FILTER & CapSense_CSD_LINEAR_SLIDERS_POS_FILT
1324:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_CSD_IIR4_FILTER))
1325:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             {
1326:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 position = CapSense_CSD_IIR4Filter(position,
1327:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                                                     (uint16)CapSense_CSD_posFilters
1328:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 CapSense_CSD_posFiltersData[posIndex] = (uint8) position;
1329:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             }                                
1330:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         #endif /* (0u != (CapSense_CSD_IIR4_FILTER & \
1331:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                *          CapSense_CSD_LINEAR_SLIDERS_POS_FILTERS_MASK))
1332:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                */
1333:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1334:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         #if (0u != (CapSense_CSD_JITTER_FILTER & CapSense_CSD_LINEAR_SLIDERS_POS_FI
1335:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_CSD_JITTER_FILTER))
1336:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             {
1337:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 position = CapSense_CSD_JitterFilter(position,
1338:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                                                     (uint16)CapSense_CSD_posFilters
1339:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 CapSense_CSD_posFiltersData[posIndex] = (uint8) position;
1340:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             }
1341:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         #endif /* (0u != (CapSense_CSD_JITTER_FILTER & \
1342:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                *           CapSense_CSD_LINEAR_SLIDERS_POS_FILTERS_MASK))
1343:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                */
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 45


1344:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     }
1345:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 }
1346:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             #endif /* (0u != CapSense_CSD_LINEAR_SLIDERS_POS_FILTERS_MASK) */
1347:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1348:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         }
1349:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         else
1350:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         {
1351:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             /* The maximum wasn't found */
1352:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             position = 0xFFFFu;
1353:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1354:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             #if(0u != CapSense_CSD_LINEAR_SLIDERS_POS_FILTERS_MASK)
1355:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 /* Reset the filters */
1356:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 if(0u != (posFiltersMask & CapSense_CSD_ANY_POS_FILTER))
1357:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 {
1358:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     CapSense_CSD_posFiltersData[firstTimeIndex] = 0u;
1359:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 }
1360:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             #endif /* (0u != CapSense_CSD_LINEAR_SLIDERS_POS_FILTERS_MASK) */
1361:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         }
1362:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1363:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         
1364:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         return (position);
1365:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     }
1366:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** #endif /* (CapSense_CSD_TOTAL_LINEAR_SLIDERS_COUNT > 0u) */
1367:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1368:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1369:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** #if(CapSense_CSD_TOTAL_RADIAL_SLIDERS_COUNT > 0u)
1370:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     /*******************************************************************************
1371:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     * Function Name: CapSense_CSD_GetRadialCentroidPos
1372:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     ********************************************************************************
1373:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *
1374:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     * Summary:
1375:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  Checks the CapSense_CSD_Signal[ ] array for a centroid within
1376:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  slider specified range. The centroid position is calculated to the resolution
1377:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  specified in the CapSense customizer. The position filters are applied to the
1378:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  result if enabled.
1379:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *
1380:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     * Parameters:
1381:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  widget:  Widget number.
1382:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  For every radial slider widget there are defines in this format:
1383:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  #define CapSense_CSD_RS_"widget_name"            5
1384:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     * 
1385:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     * Return:
1386:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  Returns position value of the radial slider.
1387:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *
1388:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     * Side Effects:
1389:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  If any sensor within the slider widget is active, the function returns values
1390:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  from zero to the API resolution value set in the CapSense customizer. If no
1391:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  sensors are active, the function returns 0xFFFF.
1392:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  There are no checks of widget type argument provided to this function.
1393:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  The unproper widget type provided will cause unexpected position calculations.
1394:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *
1395:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     * Note:
1396:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  If noise counts on the slider segments are greater than the noise
1397:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  threshold, this subroutine may generate a false centroid result. The noise
1398:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  threshold should be set carefully (high enough above the noise level) so 
1399:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  that noise will not generate a false centroid.
1400:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 46


1401:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *
1402:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     * Reentrant:
1403:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  No.
1404:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *
1405:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *******************************************************************************/
1406:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****      uint16 CapSense_CSD_GetRadialCentroidPos(uint8 widget)
1407:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 	                                       
1408:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     {
1409:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         #if (0u != CapSense_CSD_RADIAL_SLIDERS_POS_FILTERS_MASK)
1410:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             uint8 posIndex;
1411:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             uint8 firstTimeIndex = CapSense_CSD_posFiltersData[widget];
1412:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             uint8 posFiltersMask = CapSense_CSD_posFiltersMask[widget]; 
1413:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         #endif /* (0u != CapSense_CSD_RADIAL_SLIDERS_POS_FILTERS_MASK) */
1414:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1415:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         #if ((0u != (CapSense_CSD_MEDIAN_FILTER & CapSense_CSD_RADIAL_SLIDERS_POS_FILTERS_MASK)) ||
1416:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****              (0u != (CapSense_CSD_AVERAGING_FILTER & CapSense_CSD_RADIAL_SLIDERS_POS_FILTERS_MASK))
1417:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             uint8 tempPos;
1418:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         #endif /* ((0u != (CapSense_CSD_MEDIAN_FILTER & CapSense_CSD_RADIAL_SLIDERS_POS_FILTERS_MAS
1419:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                *   (0u != (CapSense_CSD_AVERAGING_FILTER & CapSense_CSD_RADIAL_SLIDERS_POS_FILTERS_
1420:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                */
1421:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1422:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         uint8 maximum;
1423:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         uint16 position;
1424:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         uint8 offset = CapSense_CSD_rawDataIndex[widget];
1425:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         uint8 count = CapSense_CSD_numberOfSensors[widget];
1426:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         
1427:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         /* Find Maximum within centroid */        
1428:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         #if (CapSense_CSD_IS_DIPLEX_SLIDER)
1429:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             maximum = CapSense_CSD_FindMaximum(offset, count, CapSense_CSD_fingerThreshold[widget],
1430:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         #else
1431:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             maximum = CapSense_CSD_FindMaximum(offset, count, CapSense_CSD_fingerThreshold[widget])
1432:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         #endif /* (CapSense_CSD_IS_DIPLEX_SLIDER) */
1433:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         
1434:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         if (maximum != 0xFFu)
1435:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         {
1436:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             /* Calculate centroid */
1437:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             position = (uint16) CapSense_CSD_CalcCentroid(maximum, 
1438:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                          offset, count, CapSense_CSD_centroidMult[widget], CapSense_CSD_noiseThresh
1439:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1440:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             #if (0u != CapSense_CSD_RADIAL_SLIDERS_POS_FILTERS_MASK)
1441:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 /* Check if this Radial slider has enabled filters */
1442:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 if (0u != (posFiltersMask & CapSense_CSD_ANY_POS_FILTER))
1443:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 {
1444:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     /* Caluclate position to store filters data */
1445:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     posIndex  = firstTimeIndex + 1u;
1446:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     
1447:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     if (0u == CapSense_CSD_posFiltersData[firstTimeIndex])
1448:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     {
1449:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         /* Init filters */
1450:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         CapSense_CSD_posFiltersData[posIndex] = (uint8) position;
1451:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         #if ((0u != (CapSense_CSD_MEDIAN_FILTER & \
1452:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                      CapSense_CSD_RADIAL_SLIDERS_POS_FILTERS_MASK)) || \
1453:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                              (0u != (CapSense_CSD_AVERAGING_FILTER & \
1454:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                      CapSense_CSD_RADIAL_SLIDERS_POS_FILTERS_MASK)))
1455:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1456:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             if ( (0u != (posFiltersMask & CapSense_CSD_MEDIAN_FILTER))  || 
1457:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                  (0u != (posFiltersMask & CapSense_CSD_AVERAGING_FILTER)) )
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 47


1458:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             {
1459:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 CapSense_CSD_posFiltersData[posIndex + 1u] = (uint8) position;
1460:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             }
1461:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         #endif /* ((0u != (CapSense_CSD_MEDIAN_FILTER & \
1462:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                *           CapSense_CSD_RADIAL_SLIDERS_POS_FILTERS_MASK)) || \
1463:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                *   (0u != (CapSense_CSD_AVERAGING_FILTER & \
1464:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                *           CapSense_CSD_RADIAL_SLIDERS_POS_FILTERS_MASK)))
1465:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                */
1466:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         
1467:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         CapSense_CSD_posFiltersData[firstTimeIndex] = 1u;
1468:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     }
1469:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     else
1470:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     {
1471:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         /* Do filtering */
1472:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         #if (0u != (CapSense_CSD_MEDIAN_FILTER & CapSense_CSD_RADIAL_SLIDERS_POS_FI
1473:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_CSD_MEDIAN_FILTER))
1474:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             {
1475:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 tempPos = (uint8) position;
1476:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 position = CapSense_CSD_MedianFilter(position,
1477:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                                                         CapSense_CSD_posFiltersData
1478:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                                                         CapSense_CSD_posFiltersData
1479:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 CapSense_CSD_posFiltersData[posIndex + 1u] = 
1480:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                                                               CapSense_CSD_posFilte
1481:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 CapSense_CSD_posFiltersData[posIndex] = tempPos;
1482:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             }
1483:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         #endif /* (0u != (CapSense_CSD_MEDIAN_FILTER & 
1484:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                *          CapSense_CSD_RADIAL_SLIDERS_POS_FILTERS_MASK))
1485:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                */
1486:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1487:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         #if (0u != (CapSense_CSD_AVERAGING_FILTER & \
1488:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                     CapSense_CSD_RADIAL_SLIDERS_POS_FILTERS_MASK))
1489:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_CSD_AVERAGING_FILTER))
1490:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             {
1491:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 tempPos = (uint8) position;
1492:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 position = CapSense_CSD_AveragingFilter(position, 
1493:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                                                        CapSense_CSD_posFiltersData[
1494:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                                                        CapSense_CSD_posFiltersData[
1495:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 CapSense_CSD_posFiltersData[posIndex+1u]= CapSense_CSD_posFiltersDa
1496:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 CapSense_CSD_posFiltersData[posIndex] = tempPos;
1497:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             }
1498:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         #endif /* (0u != (CapSense_CSD_AVERAGING_FILTER & \
1499:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                *          CapSense_CSD_RADIAL_SLIDERS_POS_FILTERS_MASK))
1500:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                */
1501:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1502:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         #if (0u != (CapSense_CSD_IIR2_FILTER & CapSense_CSD_RADIAL_SLIDERS_POS_FILT
1503:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_CSD_IIR2_FILTER))
1504:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             {
1505:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 position = CapSense_CSD_IIR2Filter(position,
1506:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                                                     (uint16)CapSense_CSD_posFilters
1507:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 CapSense_CSD_posFiltersData[posIndex] = (uint8) position;
1508:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             }
1509:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         #endif /* (0u != (CapSense_CSD_IIR2_FILTER & 
1510:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                *          CapSense_CSD_RADIAL_SLIDERS_POS_FILTERS_MASK))
1511:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                */
1512:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1513:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         #if (0u != (CapSense_CSD_IIR4_FILTER & CapSense_CSD_RADIAL_SLIDERS_POS_FILT
1514:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_CSD_IIR4_FILTER))
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 48


1515:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             {
1516:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 position = CapSense_CSD_IIR4Filter(position,
1517:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                                                     (uint16)CapSense_CSD_posFilters
1518:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 CapSense_CSD_posFiltersData[posIndex] = (uint8) position;
1519:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             }
1520:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         #endif /* (0u != (CapSense_CSD_IIR4_FILTER & 
1521:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                *          CapSense_CSD_RADIAL_SLIDERS_POS_FILTERS_MASK))
1522:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                */
1523:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1524:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         #if (0u != (CapSense_CSD_JITTER_FILTER & CapSense_CSD_RADIAL_SLIDERS_POS_FI
1525:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             if (0u != (posFiltersMask & CapSense_CSD_JITTER_FILTER))
1526:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             {
1527:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 position = CapSense_CSD_JitterFilter(position, 
1528:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                                                          CapSense_CSD_posFiltersDat
1529:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 CapSense_CSD_posFiltersData[posIndex] = (uint8) position;
1530:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             }
1531:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         #endif /* (0u != (CapSense_CSD_JITTER_FILTER &
1532:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                *           CapSense_CSD_RADIAL_SLIDERS_POS_FILTERS_MASK))
1533:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                */
1534:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     }
1535:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 }
1536:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             #endif /* (0u != CapSense_CSD_RADIAL_SLIDERS_POS_FILTERS_MASK) */
1537:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1538:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         }
1539:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         else
1540:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         {
1541:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             /* The maximum didn't find */
1542:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             position = 0xFFFFu;
1543:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1544:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             #if (0u != CapSense_CSD_RADIAL_SLIDERS_POS_FILTERS_MASK)
1545:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 /* Reset the filters */
1546:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 if((posFiltersMask & CapSense_CSD_ANY_POS_FILTER) != 0u)
1547:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 {
1548:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     CapSense_CSD_posFiltersData[firstTimeIndex] = 0u;
1549:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 }
1550:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             #endif /* (0u != CapSense_CSD_RADIAL_SLIDERS_POS_FILTERS_MASK) */
1551:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         }
1552:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         
1553:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         return (position);
1554:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     }
1555:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** #endif
1556:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1557:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1558:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** #if(CapSense_CSD_TOTAL_TOUCH_PADS_COUNT > 0u)
1559:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     /*******************************************************************************
1560:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     * Function Name: CapSense_CSD_GetTouchCentroidPos
1561:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     ********************************************************************************
1562:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *
1563:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     * Summary:
1564:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  If a finger is present on touch pad, this function calculates the X and Y
1565:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  position of the finger by calculating the centroids within touch pad specified
1566:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  range. The X and Y positions are calculated to the API resolutions set in the
1567:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  CapSense customizer. Returns a 1 if a finger is on the touchpad.
1568:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  The position filter is applied to the result if enabled.
1569:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  This function is available only if a touch pad is defined by the CapSense
1570:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  customizer.
1571:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 49


1572:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     * Parameters:
1573:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  widget:  Widget number. 
1574:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  For every touchpad widget there are defines in this format:
1575:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  #define CapSense_CSD_TP_"widget_name"            5
1576:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *
1577:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  pos:     Pointer to the array of two uint16 elements, where result
1578:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  result of calculation of X and Y position are stored.
1579:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  pos[0u]  - position of X
1580:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  pos[1u]  - position of Y
1581:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *
1582:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     * Return:
1583:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  Returns a 1 if a finger is on the touch pad, 0 - if not.
1584:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *
1585:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     * Side Effects:
1586:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *   There are no checks of widget type argument provided to this function.
1587:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *   The unproper widget type provided will cause unexpected position
1588:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *   calculations.
1589:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *
1590:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     * Reentrant:
1591:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  No.
1592:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *
1593:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *******************************************************************************/
1594:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     uint8 CapSense_CSD_GetTouchCentroidPos(uint8 widget, uint16* pos)
1595:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 	                                    
1596:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     {
1597:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         #if (0u != CapSense_CSD_TOUCH_PADS_POS_FILTERS_MASK)
1598:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             uint8 posXIndex;
1599:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             uint8 posYIndex;
1600:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             uint8 firstTimeIndex = CapSense_CSD_posFiltersData[widget];
1601:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             uint8 posFiltersMask = CapSense_CSD_posFiltersMask[widget];
1602:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         #endif /* (0u != CapSense_CSD_TOUCH_PADS_POS_FILTERS_MASK) */
1603:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1604:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         #if ((0u != (CapSense_CSD_MEDIAN_FILTER & CapSense_CSD_TOUCH_PADS_POS_FILTERS_MASK)) || \
1605:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****              (0u != (CapSense_CSD_AVERAGING_FILTER & CapSense_CSD_TOUCH_PADS_POS_FILTERS_MASK)))
1606:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             uint16 tempPos;
1607:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         #endif /* ((0u != (CapSense_CSD_MEDIAN_FILTER & CapSense_CSD_TOUCH_PADS_POS_FILTERS_MASK)) 
1608:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                *   (0u != (CapSense_CSD_AVERAGING_FILTER & CapSense_CSD_TOUCH_PADS_POS_FILTERS_MASK
1609:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                */
1610:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1611:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         uint8 maxX;
1612:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         uint8 maxY;
1613:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         uint8 posX;
1614:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         uint8 posY;
1615:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         uint8 touch = 0u;
1616:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         uint8 offset = CapSense_CSD_rawDataIndex[widget];
1617:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         uint8 count = CapSense_CSD_numberOfSensors[widget];
1618:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         
1619:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         /* Find Maximum within X centroid */
1620:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         #if (CapSense_CSD_IS_DIPLEX_SLIDER)
1621:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             maxX = CapSense_CSD_FindMaximum(offset, count, CapSense_CSD_fingerThreshold[widget], 0u
1622:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         #else
1623:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             maxX = CapSense_CSD_FindMaximum(offset, count, CapSense_CSD_fingerThreshold[widget]);
1624:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         #endif /* (CapSense_CSD_IS_DIPLEX_SLIDER) */
1625:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1626:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         if (maxX != 0xFFu)
1627:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         {
1628:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             offset = CapSense_CSD_rawDataIndex[widget + 1u];
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 50


1629:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             count = CapSense_CSD_numberOfSensors[widget + 1u];
1630:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1631:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             /* Find Maximum within Y centroid */
1632:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             #if (CapSense_CSD_IS_DIPLEX_SLIDER)
1633:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 maxY = CapSense_CSD_FindMaximum(offset, count, CapSense_CSD_fingerThreshold[widget 
1634:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             #else
1635:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 maxY = CapSense_CSD_FindMaximum(offset, count, CapSense_CSD_fingerThreshold[widget 
1636:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             #endif /* (CapSense_CSD_IS_DIPLEX_SLIDER) */
1637:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1638:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             if (maxY != 0xFFu)
1639:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             {
1640:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 /* X and Y maximums are found = true touch */
1641:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 touch = 1u;
1642:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 
1643:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 /* Calculate Y centroid */
1644:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 posY = CapSense_CSD_CalcCentroid(maxY, offset, count, 
1645:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             CapSense_CSD_centroidMult[widget + 1u], CapSense_CSD_noiseThreshold[wid
1646:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 
1647:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 /* Calculate X centroid */
1648:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 offset = CapSense_CSD_rawDataIndex[widget];
1649:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 count = CapSense_CSD_numberOfSensors[widget];
1650:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 
1651:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 posX = CapSense_CSD_CalcCentroid(maxX, offset, count, 
1652:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             CapSense_CSD_centroidMult[widget],CapSense_CSD_noiseThreshold[widget]);
1653:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     
1654:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 #if (0u != CapSense_CSD_TOUCH_PADS_POS_FILTERS_MASK)
1655:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     /* Check if this TP has enabled filters */
1656:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     if (0u != (posFiltersMask & CapSense_CSD_ANY_POS_FILTER))
1657:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     {
1658:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         /* Caluclate position to store filters data */
1659:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         posXIndex  = firstTimeIndex + 1u;
1660:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         posYIndex  = CapSense_CSD_posFiltersData[widget + 1u];
1661:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         
1662:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         if (0u == CapSense_CSD_posFiltersData[firstTimeIndex])
1663:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         {
1664:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             /* Init filters */
1665:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             CapSense_CSD_posFiltersData[posXIndex] = posX;
1666:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             CapSense_CSD_posFiltersData[posYIndex] = posY;
1667:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1668:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             #if((0u != (CapSense_CSD_MEDIAN_FILTER & \
1669:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                         CapSense_CSD_TOUCH_PADS_POS_FILTERS_MASK))|| \
1670:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 (0u != (CapSense_CSD_AVERAGING_FILTER & \
1671:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                         CapSense_CSD_TOUCH_PADS_POS_FILTERS_MASK)))
1672:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1673:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 if ( (0u != (posFiltersMask & CapSense_CSD_MEDIAN_FILTER)) || 
1674:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                      (0u != (posFiltersMask & CapSense_CSD_AVERAGING_FILTER)) )
1675:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 {
1676:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                     CapSense_CSD_posFiltersData[posXIndex + 1u] = posX;
1677:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                     CapSense_CSD_posFiltersData[posYIndex + 1u] = posY;
1678:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 }
1679:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             #endif /* ((0u != (CapSense_CSD_MEDIAN_FILTER & \
1680:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                    *           CapSense_CSD_TOUCH_PADS_POS_FILTERS_MASK)) || \
1681:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                    *    (0u != (CapSense_CSD_AVERAGING_FILTER & \
1682:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                    *            CapSense_CSD_TOUCH_PADS_POS_FILTERS_MASK)))
1683:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                    */
1684:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             
1685:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             CapSense_CSD_posFiltersData[firstTimeIndex] = 1u;
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 51


1686:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         }
1687:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         else
1688:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         {
1689:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             /* Do filtering */
1690:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             #if (0u != (CapSense_CSD_MEDIAN_FILTER & CapSense_CSD_TOUCH_PADS_POS_FI
1691:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 if (0u != (posFiltersMask & CapSense_CSD_MEDIAN_FILTER))
1692:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 {
1693:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                     tempPos = posX;
1694:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                     posX = (uint8) CapSense_CSD_MedianFilter(posX,
1695:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                                                       CapSense_CSD_posFiltersData[p
1696:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                                                       CapSense_CSD_posFiltersData[p
1697:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                     CapSense_CSD_posFiltersData[posXIndex + 1u] = 
1698:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                                                              CapSense_CSD_posFilter
1699:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                     CapSense_CSD_posFiltersData[posXIndex] = tempPos;
1700:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                     
1701:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                     tempPos = posY;
1702:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                     posY = (uint8) CapSense_CSD_MedianFilter(posY,
1703:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                                                        CapSense_CSD_posFiltersData[
1704:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                                                        CapSense_CSD_posFiltersData[
1705:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                     CapSense_CSD_posFiltersData[posYIndex + 1u] = 
1706:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                                                              CapSense_CSD_posFilter
1707:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                     CapSense_CSD_posFiltersData[posYIndex] = tempPos;
1708:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 }
1709:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 
1710:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             #endif /* (0u != (CapSense_CSD_MEDIAN_FILTER & \
1711:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                    *          CapSense_CSD_TOUCH_PADS_POS_FILTERS_MASK))
1712:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                    */
1713:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1714:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             #if(0u !=(CapSense_CSD_AVERAGING_FILTER & CapSense_CSD_TOUCH_PADS_POS_F
1715:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 if (0u != (posFiltersMask & CapSense_CSD_AVERAGING_FILTER))
1716:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 {
1717:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                     tempPos = posX;
1718:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                     posX = (uint8) CapSense_CSD_AveragingFilter(posX,
1719:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                                                        CapSense_CSD_posFiltersData[
1720:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                                                        CapSense_CSD_posFiltersData[
1721:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                     CapSense_CSD_posFiltersData[posXIndex + 1u] = 
1722:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                                                              CapSense_CSD_posFilter
1723:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                     CapSense_CSD_posFiltersData[posXIndex] = tempPos;
1724:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                     
1725:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                     tempPos = posY;
1726:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                     posY = (uint8) CapSense_CSD_AveragingFilter(posY, 
1727:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                                                       CapSense_CSD_posFiltersData[p
1728:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                                                       CapSense_CSD_posFiltersData[p
1729:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                     CapSense_CSD_posFiltersData[posYIndex + 1u] = 
1730:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                                                             CapSense_CSD_posFilters
1731:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                     CapSense_CSD_posFiltersData[posYIndex] = tempPos;
1732:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 }
1733:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1734:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             #endif /* (0u != (CapSense_CSD_AVERAGING_FILTER & \
1735:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                    *           CapSense_CSD_TOUCH_PADS_POS_FILTERS_MASK))
1736:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                    */
1737:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1738:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             #if (0u != (CapSense_CSD_IIR2_FILTER & CapSense_CSD_TOUCH_PADS_POS_FILT
1739:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 if (0u != (posFiltersMask & CapSense_CSD_IIR2_FILTER))
1740:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 {
1741:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                     posX = (uint8) CapSense_CSD_IIR2Filter(posX, 
1742:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                                                            CapSense_CSD_posFiltersD
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 52


1743:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                     CapSense_CSD_posFiltersData[posXIndex] = posX;
1744:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                     
1745:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                     posY = (uint8) CapSense_CSD_IIR2Filter(posY, 
1746:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                                                             CapSense_CSD_posFilters
1747:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                     CapSense_CSD_posFiltersData[posYIndex] = posY;
1748:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 }
1749:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 
1750:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             #endif /* (0u != (CapSense_CSD_IIR2_FILTER & \
1751:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                    *          CapSense_CSD_TOUCH_PADS_POS_FILTERS_MASK))
1752:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                    */
1753:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1754:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             #if (0u != (CapSense_CSD_IIR4_FILTER & CapSense_CSD_TOUCH_PADS_POS_FILT
1755:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 if (0u != (posFiltersMask & CapSense_CSD_IIR4_FILTER))
1756:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 {
1757:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                     posX = (uint8) CapSense_CSD_IIR4Filter((uint16)posX,
1758:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                                                     (uint16)CapSense_CSD_posFilters
1759:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                     CapSense_CSD_posFiltersData[posXIndex] = posX;
1760:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1761:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                     posY = (uint8) CapSense_CSD_IIR4Filter((uint16)posY,
1762:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                                                     (uint16)CapSense_CSD_posFilters
1763:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                     CapSense_CSD_posFiltersData[posYIndex] = posY;
1764:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 }
1765:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 
1766:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             #endif /* (0u != (CapSense_CSD_IIR4_FILTER & \
1767:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                    *           CapSense_CSD_TOUCH_PADS_POS_FILTERS_MASK))
1768:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                    */
1769:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1770:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             #if (0u != (CapSense_CSD_JITTER_FILTER & CapSense_CSD_TOUCH_PADS_POS_FI
1771:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                 if (0u != (posFiltersMask & CapSense_CSD_JITTER_FILTER))
1772:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                     {
1773:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                         posX = (uint8) CapSense_CSD_JitterFilter(posX, 
1774:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                                                             CapSense_CSD_posFilters
1775:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                         CapSense_CSD_posFiltersData[posXIndex] = posX;
1776:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                         
1777:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                         posY = (uint8) CapSense_CSD_JitterFilter(posY, 
1778:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                                                             CapSense_CSD_posFilters
1779:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                         CapSense_CSD_posFiltersData[posYIndex] = posY;
1780:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                     }
1781:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                             #endif /* (0u != (CapSense_CSD_JITTER_FILTER & \
1782:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                    *           CapSense_CSD_TOUCH_PADS_POS_FILTERS_MASK))
1783:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                    */
1784:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                         }
1785:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     }
1786:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 #endif /* (0u != CapSense_CSD_TOUCH_PADS_POS_FILTERS_MASK) */
1787:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1788:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 /* Save positions */
1789:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 pos[0u] = posX;
1790:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 pos[1u] = posY;
1791:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             }
1792:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         }
1793:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1794:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         #if (0u != CapSense_CSD_TOUCH_PADS_POS_FILTERS_MASK)
1795:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             if(touch == 0u)
1796:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             {
1797:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 /* Reset the filters */
1798:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 if ((posFiltersMask & CapSense_CSD_ANY_POS_FILTER) != 0u)
1799:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 {
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 53


1800:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                     CapSense_CSD_posFiltersData[firstTimeIndex] = 0u;
1801:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                 }
1802:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             }
1803:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         #endif /* (0u != CapSense_CSD_TOUCH_PADS_POS_FILTERS_MASK) */
1804:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         
1805:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         return (touch);
1806:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     }
1807:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** #endif /* (CapSense_CSD_TOTAL_TOUCH_PADS_COUNT > 0u) */
1808:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1809:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** 
1810:Generated_Source\PSoC5/CapSense_CSD_CSHL.c **** #if ( (CapSense_CSD_RAW_FILTER_MASK & CapSense_CSD_MEDIAN_FILTER) | \
1811:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****       (CapSense_CSD_POS_FILTERS_MASK & CapSense_CSD_MEDIAN_FILTER) )
1812:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     /*******************************************************************************
1813:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     * Function Name: CapSense_CSD_MedianFilter
1814:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     ********************************************************************************
1815:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *
1816:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     * Summary:
1817:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  Median filter function. 
1818:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  The median filter looks at the three most recent samples and reports the 
1819:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  median value.
1820:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *
1821:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     * Parameters:
1822:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  x1:  Current value.
1823:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  x2:  Previous value.
1824:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  x3:  Before previous value.
1825:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *
1826:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     * Return:
1827:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *  Returns filtered value.
1828:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *
1829:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     *******************************************************************************/
1830:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     uint16 CapSense_CSD_MedianFilter(uint16 x1, uint16 x2, uint16 x3)
1831:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****                                          
1832:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     {
 1156              		.loc 1 1832 0
 1157              		.cfi_startproc
 1158              		@ args = 0, pretend = 0, frame = 16
 1159              		@ frame_needed = 1, uses_anonymous_args = 0
 1160              		@ link register save eliminated.
 1161 0000 80B4     		push	{r7}
 1162              		.cfi_def_cfa_offset 4
 1163              		.cfi_offset 7, -4
 1164 0002 85B0     		sub	sp, sp, #20
 1165              		.cfi_def_cfa_offset 24
 1166 0004 00AF     		add	r7, sp, #0
 1167              		.cfi_def_cfa_register 7
 1168 0006 0346     		mov	r3, r0
 1169 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 1170 000a 0B46     		mov	r3, r1	@ movhi
 1171 000c BB80     		strh	r3, [r7, #4]	@ movhi
 1172 000e 1346     		mov	r3, r2	@ movhi
 1173 0010 7B80     		strh	r3, [r7, #2]	@ movhi
1833:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         uint16 tmp;
1834:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         
1835:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         if (x1 > x2)
 1174              		.loc 1 1835 0
 1175 0012 FA88     		ldrh	r2, [r7, #6]
 1176 0014 BB88     		ldrh	r3, [r7, #4]
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 54


 1177 0016 9A42     		cmp	r2, r3
 1178 0018 05D9     		bls	.L65
1836:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         {
1837:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             tmp = x2;
 1179              		.loc 1 1837 0
 1180 001a BB88     		ldrh	r3, [r7, #4]	@ movhi
 1181 001c FB81     		strh	r3, [r7, #14]	@ movhi
1838:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             x2 = x1;
 1182              		.loc 1 1838 0
 1183 001e FB88     		ldrh	r3, [r7, #6]	@ movhi
 1184 0020 BB80     		strh	r3, [r7, #4]	@ movhi
1839:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             x1 = tmp;
 1185              		.loc 1 1839 0
 1186 0022 FB89     		ldrh	r3, [r7, #14]	@ movhi
 1187 0024 FB80     		strh	r3, [r7, #6]	@ movhi
 1188              	.L65:
1840:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         }
1841:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         
1842:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         if (x2 > x3)
 1189              		.loc 1 1842 0
 1190 0026 BA88     		ldrh	r2, [r7, #4]
 1191 0028 7B88     		ldrh	r3, [r7, #2]
 1192 002a 9A42     		cmp	r2, r3
 1193 002c 01D9     		bls	.L66
1843:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         {
1844:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****             x2 = x3;
 1194              		.loc 1 1844 0
 1195 002e 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1196 0030 BB80     		strh	r3, [r7, #4]	@ movhi
 1197              	.L66:
1845:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         }
1846:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         
1847:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****         return ((x1 > x2) ? x1 : x2);
 1198              		.loc 1 1847 0
 1199 0032 BA88     		ldrh	r2, [r7, #4]
 1200 0034 FB88     		ldrh	r3, [r7, #6]
 1201 0036 9342     		cmp	r3, r2
 1202 0038 38BF     		it	cc
 1203 003a 1346     		movcc	r3, r2
 1204 003c 9BB2     		uxth	r3, r3
1848:Generated_Source\PSoC5/CapSense_CSD_CSHL.c ****     }
 1205              		.loc 1 1848 0
 1206 003e 1846     		mov	r0, r3
 1207 0040 1437     		adds	r7, r7, #20
 1208              		.cfi_def_cfa_offset 4
 1209 0042 BD46     		mov	sp, r7
 1210              		.cfi_def_cfa_register 13
 1211              		@ sp needed
 1212 0044 80BC     		pop	{r7}
 1213              		.cfi_restore 7
 1214              		.cfi_def_cfa_offset 0
 1215 0046 7047     		bx	lr
 1216              		.cfi_endproc
 1217              	.LFE11:
 1218              		.size	CapSense_CSD_MedianFilter, .-CapSense_CSD_MedianFilter
 1219              		.text
 1220              	.Letext0:
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 55


 1221              		.file 2 "Generated_Source\\PSoC5\\cytypes.h"
 1222              		.file 3 "Generated_Source\\PSoC5\\CapSense_CSD.h"
 1223              		.file 4 "Generated_Source\\PSoC5\\CapSense_CSD_CSHL.h"
 1224              		.section	.debug_info,"",%progbits
 1225              	.Ldebug_info0:
 1226 0000 CB050000 		.4byte	0x5cb
 1227 0004 0400     		.2byte	0x4
 1228 0006 00000000 		.4byte	.Ldebug_abbrev0
 1229 000a 04       		.byte	0x4
 1230 000b 01       		.uleb128 0x1
 1231 000c AF000000 		.4byte	.LASF61
 1232 0010 0C       		.byte	0xc
 1233 0011 00000000 		.4byte	.LASF62
 1234 0015 EE030000 		.4byte	.LASF63
 1235 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1236 001d 00000000 		.4byte	0
 1237 0021 00000000 		.4byte	.Ldebug_line0
 1238 0025 02       		.uleb128 0x2
 1239 0026 01       		.byte	0x1
 1240 0027 06       		.byte	0x6
 1241 0028 62010000 		.4byte	.LASF0
 1242 002c 02       		.uleb128 0x2
 1243 002d 01       		.byte	0x1
 1244 002e 08       		.byte	0x8
 1245 002f 63030000 		.4byte	.LASF1
 1246 0033 02       		.uleb128 0x2
 1247 0034 02       		.byte	0x2
 1248 0035 05       		.byte	0x5
 1249 0036 80030000 		.4byte	.LASF2
 1250 003a 02       		.uleb128 0x2
 1251 003b 02       		.byte	0x2
 1252 003c 07       		.byte	0x7
 1253 003d 71020000 		.4byte	.LASF3
 1254 0041 02       		.uleb128 0x2
 1255 0042 04       		.byte	0x4
 1256 0043 05       		.byte	0x5
 1257 0044 AE010000 		.4byte	.LASF4
 1258 0048 02       		.uleb128 0x2
 1259 0049 04       		.byte	0x4
 1260 004a 07       		.byte	0x7
 1261 004b 45020000 		.4byte	.LASF5
 1262 004f 02       		.uleb128 0x2
 1263 0050 08       		.byte	0x8
 1264 0051 05       		.byte	0x5
 1265 0052 54010000 		.4byte	.LASF6
 1266 0056 02       		.uleb128 0x2
 1267 0057 08       		.byte	0x8
 1268 0058 07       		.byte	0x7
 1269 0059 3D010000 		.4byte	.LASF7
 1270 005d 03       		.uleb128 0x3
 1271 005e 04       		.byte	0x4
 1272 005f 05       		.byte	0x5
 1273 0060 696E7400 		.ascii	"int\000"
 1274 0064 02       		.uleb128 0x2
 1275 0065 04       		.byte	0x4
 1276 0066 07       		.byte	0x7
 1277 0067 38020000 		.4byte	.LASF8
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 56


 1278 006b 04       		.uleb128 0x4
 1279 006c D1010000 		.4byte	.LASF9
 1280 0070 02       		.byte	0x2
 1281 0071 9201     		.2byte	0x192
 1282 0073 2C000000 		.4byte	0x2c
 1283 0077 04       		.uleb128 0x4
 1284 0078 48000000 		.4byte	.LASF10
 1285 007c 02       		.byte	0x2
 1286 007d 9301     		.2byte	0x193
 1287 007f 3A000000 		.4byte	0x3a
 1288 0083 04       		.uleb128 0x4
 1289 0084 DE010000 		.4byte	.LASF11
 1290 0088 02       		.byte	0x2
 1291 0089 9401     		.2byte	0x194
 1292 008b 48000000 		.4byte	0x48
 1293 008f 02       		.uleb128 0x2
 1294 0090 04       		.byte	0x4
 1295 0091 04       		.byte	0x4
 1296 0092 FB020000 		.4byte	.LASF12
 1297 0096 02       		.uleb128 0x2
 1298 0097 08       		.byte	0x8
 1299 0098 04       		.byte	0x4
 1300 0099 D7010000 		.4byte	.LASF13
 1301 009d 02       		.uleb128 0x2
 1302 009e 01       		.byte	0x1
 1303 009f 08       		.byte	0x8
 1304 00a0 63040000 		.4byte	.LASF14
 1305 00a4 02       		.uleb128 0x2
 1306 00a5 08       		.byte	0x8
 1307 00a6 04       		.byte	0x4
 1308 00a7 A2020000 		.4byte	.LASF15
 1309 00ab 02       		.uleb128 0x2
 1310 00ac 04       		.byte	0x4
 1311 00ad 07       		.byte	0x7
 1312 00ae 99020000 		.4byte	.LASF16
 1313 00b2 05       		.uleb128 0x5
 1314 00b3 F0010000 		.4byte	.LASF17
 1315 00b7 01       		.byte	0x1
 1316 00b8 7B       		.byte	0x7b
 1317 00b9 00000000 		.4byte	.LFB0
 1318 00bd 90000000 		.4byte	.LFE0-.LFB0
 1319 00c1 01       		.uleb128 0x1
 1320 00c2 9C       		.byte	0x9c
 1321 00c3 E4000000 		.4byte	0xe4
 1322 00c7 06       		.uleb128 0x6
 1323 00c8 84020000 		.4byte	.LASF19
 1324 00cc 01       		.byte	0x1
 1325 00cd 7B       		.byte	0x7b
 1326 00ce 6B000000 		.4byte	0x6b
 1327 00d2 02       		.uleb128 0x2
 1328 00d3 91       		.byte	0x91
 1329 00d4 6F       		.sleb128 -17
 1330 00d5 07       		.uleb128 0x7
 1331 00d6 8A030000 		.4byte	.LASF21
 1332 00da 01       		.byte	0x1
 1333 00db 7F       		.byte	0x7f
 1334 00dc 6B000000 		.4byte	0x6b
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 57


 1335 00e0 02       		.uleb128 0x2
 1336 00e1 91       		.byte	0x91
 1337 00e2 77       		.sleb128 -9
 1338 00e3 00       		.byte	0
 1339 00e4 08       		.uleb128 0x8
 1340 00e5 89000000 		.4byte	.LASF18
 1341 00e9 01       		.byte	0x1
 1342 00ea C4       		.byte	0xc4
 1343 00eb 00000000 		.4byte	.LFB1
 1344 00ef 2E000000 		.4byte	.LFE1-.LFB1
 1345 00f3 01       		.uleb128 0x1
 1346 00f4 9C       		.byte	0x9c
 1347 00f5 08010000 		.4byte	0x108
 1348 00f9 06       		.uleb128 0x6
 1349 00fa 84020000 		.4byte	.LASF19
 1350 00fe 01       		.byte	0x1
 1351 00ff C4       		.byte	0xc4
 1352 0100 6B000000 		.4byte	0x6b
 1353 0104 02       		.uleb128 0x2
 1354 0105 91       		.byte	0x91
 1355 0106 77       		.sleb128 -9
 1356 0107 00       		.byte	0
 1357 0108 08       		.uleb128 0x8
 1358 0109 22030000 		.4byte	.LASF20
 1359 010d 01       		.byte	0x1
 1360 010e F8       		.byte	0xf8
 1361 010f 00000000 		.4byte	.LFB2
 1362 0113 28000000 		.4byte	.LFE2-.LFB2
 1363 0117 01       		.uleb128 0x1
 1364 0118 9C       		.byte	0x9c
 1365 0119 2A010000 		.4byte	0x12a
 1366 011d 09       		.uleb128 0x9
 1367 011e 6900     		.ascii	"i\000"
 1368 0120 01       		.byte	0x1
 1369 0121 FB       		.byte	0xfb
 1370 0122 6B000000 		.4byte	0x6b
 1371 0126 02       		.uleb128 0x2
 1372 0127 91       		.byte	0x91
 1373 0128 77       		.sleb128 -9
 1374 0129 00       		.byte	0
 1375 012a 0A       		.uleb128 0xa
 1376 012b AE020000 		.4byte	.LASF22
 1377 012f 01       		.byte	0x1
 1378 0130 1901     		.2byte	0x119
 1379 0132 00000000 		.4byte	.LFB3
 1380 0136 70000000 		.4byte	.LFE3-.LFB3
 1381 013a 01       		.uleb128 0x1
 1382 013b 9C       		.byte	0x9c
 1383 013c 6C010000 		.4byte	0x16c
 1384 0140 0B       		.uleb128 0xb
 1385 0141 6900     		.ascii	"i\000"
 1386 0143 01       		.byte	0x1
 1387 0144 1C01     		.2byte	0x11c
 1388 0146 6B000000 		.4byte	0x6b
 1389 014a 02       		.uleb128 0x2
 1390 014b 91       		.byte	0x91
 1391 014c 77       		.sleb128 -9
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 58


 1392 014d 0B       		.uleb128 0xb
 1393 014e 706F7300 		.ascii	"pos\000"
 1394 0152 01       		.byte	0x1
 1395 0153 1D01     		.2byte	0x11d
 1396 0155 6B000000 		.4byte	0x6b
 1397 0159 02       		.uleb128 0x2
 1398 015a 91       		.byte	0x91
 1399 015b 76       		.sleb128 -10
 1400 015c 0C       		.uleb128 0xc
 1401 015d D6020000 		.4byte	.LASF23
 1402 0161 01       		.byte	0x1
 1403 0162 1E01     		.2byte	0x11e
 1404 0164 6B000000 		.4byte	0x6b
 1405 0168 02       		.uleb128 0x2
 1406 0169 91       		.byte	0x91
 1407 016a 75       		.sleb128 -11
 1408 016b 00       		.byte	0
 1409 016c 0A       		.uleb128 0xa
 1410 016d AF030000 		.4byte	.LASF24
 1411 0171 01       		.byte	0x1
 1412 0172 5C01     		.2byte	0x15c
 1413 0174 00000000 		.4byte	.LFB4
 1414 0178 84010000 		.4byte	.LFE4-.LFB4
 1415 017c 01       		.uleb128 0x1
 1416 017d 9C       		.byte	0x9c
 1417 017e DD010000 		.4byte	0x1dd
 1418 0182 0D       		.uleb128 0xd
 1419 0183 84020000 		.4byte	.LASF19
 1420 0187 01       		.byte	0x1
 1421 0188 5C01     		.2byte	0x15c
 1422 018a 6B000000 		.4byte	0x6b
 1423 018e 02       		.uleb128 0x2
 1424 018f 91       		.byte	0x91
 1425 0190 67       		.sleb128 -25
 1426 0191 0C       		.uleb128 0xc
 1427 0192 8B020000 		.4byte	.LASF25
 1428 0196 01       		.byte	0x1
 1429 0197 5F01     		.2byte	0x15f
 1430 0199 83000000 		.4byte	0x83
 1431 019d 02       		.uleb128 0x2
 1432 019e 91       		.byte	0x91
 1433 019f 6C       		.sleb128 -20
 1434 01a0 0C       		.uleb128 0xc
 1435 01a1 82050000 		.4byte	.LASF26
 1436 01a5 01       		.byte	0x1
 1437 01a6 6001     		.2byte	0x160
 1438 01a8 77000000 		.4byte	0x77
 1439 01ac 02       		.uleb128 0x2
 1440 01ad 91       		.byte	0x91
 1441 01ae 76       		.sleb128 -10
 1442 01af 0C       		.uleb128 0xc
 1443 01b0 4F000000 		.4byte	.LASF27
 1444 01b4 01       		.byte	0x1
 1445 01b5 6101     		.2byte	0x161
 1446 01b7 77000000 		.4byte	0x77
 1447 01bb 02       		.uleb128 0x2
 1448 01bc 91       		.byte	0x91
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 59


 1449 01bd 70       		.sleb128 -16
 1450 01be 0C       		.uleb128 0xc
 1451 01bf 8A030000 		.4byte	.LASF21
 1452 01c3 01       		.byte	0x1
 1453 01c4 6201     		.2byte	0x162
 1454 01c6 6B000000 		.4byte	0x6b
 1455 01ca 02       		.uleb128 0x2
 1456 01cb 91       		.byte	0x91
 1457 01cc 75       		.sleb128 -11
 1458 01cd 0C       		.uleb128 0xc
 1459 01ce 71030000 		.4byte	.LASF28
 1460 01d2 01       		.byte	0x1
 1461 01d3 6301     		.2byte	0x163
 1462 01d5 77000000 		.4byte	0x77
 1463 01d9 02       		.uleb128 0x2
 1464 01da 91       		.byte	0x91
 1465 01db 72       		.sleb128 -14
 1466 01dc 00       		.byte	0
 1467 01dd 0A       		.uleb128 0xa
 1468 01de 82040000 		.4byte	.LASF29
 1469 01e2 01       		.byte	0x1
 1470 01e3 0902     		.2byte	0x209
 1471 01e5 00000000 		.4byte	.LFB5
 1472 01e9 50000000 		.4byte	.LFE5-.LFB5
 1473 01ed 01       		.uleb128 0x1
 1474 01ee 9C       		.byte	0x9c
 1475 01ef 1F020000 		.4byte	0x21f
 1476 01f3 0B       		.uleb128 0xb
 1477 01f4 6900     		.ascii	"i\000"
 1478 01f6 01       		.byte	0x1
 1479 01f7 0C02     		.2byte	0x20c
 1480 01f9 6B000000 		.4byte	0x6b
 1481 01fd 02       		.uleb128 0x2
 1482 01fe 91       		.byte	0x91
 1483 01ff 77       		.sleb128 -9
 1484 0200 0B       		.uleb128 0xb
 1485 0201 706F7300 		.ascii	"pos\000"
 1486 0205 01       		.byte	0x1
 1487 0206 0D02     		.2byte	0x20d
 1488 0208 6B000000 		.4byte	0x6b
 1489 020c 02       		.uleb128 0x2
 1490 020d 91       		.byte	0x91
 1491 020e 76       		.sleb128 -10
 1492 020f 0C       		.uleb128 0xc
 1493 0210 D6020000 		.4byte	.LASF23
 1494 0214 01       		.byte	0x1
 1495 0215 0E02     		.2byte	0x20e
 1496 0217 6B000000 		.4byte	0x6b
 1497 021b 02       		.uleb128 0x2
 1498 021c 91       		.byte	0x91
 1499 021d 75       		.sleb128 -11
 1500 021e 00       		.byte	0
 1501 021f 0E       		.uleb128 0xe
 1502 0220 87010000 		.4byte	.LASF35
 1503 0224 01       		.byte	0x1
 1504 0225 4302     		.2byte	0x243
 1505 0227 6B000000 		.4byte	0x6b
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 60


 1506 022b 00000000 		.4byte	.LFB6
 1507 022f 10010000 		.4byte	.LFE6-.LFB6
 1508 0233 01       		.uleb128 0x1
 1509 0234 9C       		.byte	0x9c
 1510 0235 B2020000 		.4byte	0x2b2
 1511 0239 0D       		.uleb128 0xd
 1512 023a 84020000 		.4byte	.LASF19
 1513 023e 01       		.byte	0x1
 1514 023f 4302     		.2byte	0x243
 1515 0241 6B000000 		.4byte	0x6b
 1516 0245 02       		.uleb128 0x2
 1517 0246 91       		.byte	0x91
 1518 0247 67       		.sleb128 -25
 1519 0248 0C       		.uleb128 0xc
 1520 0249 F6040000 		.4byte	.LASF30
 1521 024d 01       		.byte	0x1
 1522 024e 4602     		.2byte	0x246
 1523 0250 6B000000 		.4byte	0x6b
 1524 0254 02       		.uleb128 0x2
 1525 0255 91       		.byte	0x91
 1526 0256 6E       		.sleb128 -18
 1527 0257 0B       		.uleb128 0xb
 1528 0258 706F7300 		.ascii	"pos\000"
 1529 025c 01       		.byte	0x1
 1530 025d 4802     		.2byte	0x248
 1531 025f 6B000000 		.4byte	0x6b
 1532 0263 02       		.uleb128 0x2
 1533 0264 91       		.byte	0x91
 1534 0265 77       		.sleb128 -9
 1535 0266 0C       		.uleb128 0xc
 1536 0267 91030000 		.4byte	.LASF31
 1537 026b 01       		.byte	0x1
 1538 026c 4902     		.2byte	0x249
 1539 026e 6B000000 		.4byte	0x6b
 1540 0272 02       		.uleb128 0x2
 1541 0273 91       		.byte	0x91
 1542 0274 76       		.sleb128 -10
 1543 0275 0C       		.uleb128 0xc
 1544 0276 8A030000 		.4byte	.LASF21
 1545 027a 01       		.byte	0x1
 1546 027b 4B02     		.2byte	0x24b
 1547 027d 6B000000 		.4byte	0x6b
 1548 0281 02       		.uleb128 0x2
 1549 0282 91       		.byte	0x91
 1550 0283 75       		.sleb128 -11
 1551 0284 0C       		.uleb128 0xc
 1552 0285 5F000000 		.4byte	.LASF32
 1553 0289 01       		.byte	0x1
 1554 028a 4C02     		.2byte	0x24c
 1555 028c 77000000 		.4byte	0x77
 1556 0290 02       		.uleb128 0x2
 1557 0291 91       		.byte	0x91
 1558 0292 72       		.sleb128 -14
 1559 0293 0C       		.uleb128 0xc
 1560 0294 E5010000 		.4byte	.LASF33
 1561 0298 01       		.byte	0x1
 1562 0299 4D02     		.2byte	0x24d
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 61


 1563 029b 77000000 		.4byte	0x77
 1564 029f 02       		.uleb128 0x2
 1565 02a0 91       		.byte	0x91
 1566 02a1 70       		.sleb128 -16
 1567 02a2 0C       		.uleb128 0xc
 1568 02a3 90020000 		.4byte	.LASF34
 1569 02a7 01       		.byte	0x1
 1570 02a8 4E02     		.2byte	0x24e
 1571 02aa 6B000000 		.4byte	0x6b
 1572 02ae 02       		.uleb128 0x2
 1573 02af 91       		.byte	0x91
 1574 02b0 6F       		.sleb128 -17
 1575 02b1 00       		.byte	0
 1576 02b2 0F       		.uleb128 0xf
 1577 02b3 28050000 		.4byte	.LASF36
 1578 02b7 01       		.byte	0x1
 1579 02b8 8B02     		.2byte	0x28b
 1580 02ba 6B000000 		.4byte	0x6b
 1581 02be 00000000 		.4byte	.LFB7
 1582 02c2 54000000 		.4byte	.LFE7-.LFB7
 1583 02c6 01       		.uleb128 0x1
 1584 02c7 9C       		.byte	0x9c
 1585 02c8 09030000 		.4byte	0x309
 1586 02cc 0D       		.uleb128 0xd
 1587 02cd 8A030000 		.4byte	.LASF21
 1588 02d1 01       		.byte	0x1
 1589 02d2 8B02     		.2byte	0x28b
 1590 02d4 6B000000 		.4byte	0x6b
 1591 02d8 02       		.uleb128 0x2
 1592 02d9 91       		.byte	0x91
 1593 02da 6F       		.sleb128 -17
 1594 02db 0C       		.uleb128 0xc
 1595 02dc 6E010000 		.4byte	.LASF37
 1596 02e0 01       		.byte	0x1
 1597 02e1 8E02     		.2byte	0x28e
 1598 02e3 6B000000 		.4byte	0x6b
 1599 02e7 02       		.uleb128 0x2
 1600 02e8 91       		.byte	0x91
 1601 02e9 77       		.sleb128 -9
 1602 02ea 0C       		.uleb128 0xc
 1603 02eb 77010000 		.4byte	.LASF38
 1604 02ef 01       		.byte	0x1
 1605 02f0 8F02     		.2byte	0x28f
 1606 02f2 6B000000 		.4byte	0x6b
 1607 02f6 02       		.uleb128 0x2
 1608 02f7 91       		.byte	0x91
 1609 02f8 75       		.sleb128 -11
 1610 02f9 0C       		.uleb128 0xc
 1611 02fa A8010000 		.4byte	.LASF39
 1612 02fe 01       		.byte	0x1
 1613 02ff 9002     		.2byte	0x290
 1614 0301 6B000000 		.4byte	0x6b
 1615 0305 02       		.uleb128 0x2
 1616 0306 91       		.byte	0x91
 1617 0307 76       		.sleb128 -10
 1618 0308 00       		.byte	0
 1619 0309 0F       		.uleb128 0xf
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 62


 1620 030a 04050000 		.4byte	.LASF40
 1621 030e 01       		.byte	0x1
 1622 030f B702     		.2byte	0x2b7
 1623 0311 6B000000 		.4byte	0x6b
 1624 0315 00000000 		.4byte	.LFB8
 1625 0319 38000000 		.4byte	.LFE8-.LFB8
 1626 031d 01       		.uleb128 0x1
 1627 031e 9C       		.byte	0x9c
 1628 031f 40030000 		.4byte	0x340
 1629 0323 0B       		.uleb128 0xb
 1630 0324 6900     		.ascii	"i\000"
 1631 0326 01       		.byte	0x1
 1632 0327 BA02     		.2byte	0x2ba
 1633 0329 6B000000 		.4byte	0x6b
 1634 032d 02       		.uleb128 0x2
 1635 032e 91       		.byte	0x91
 1636 032f 77       		.sleb128 -9
 1637 0330 0C       		.uleb128 0xc
 1638 0331 A8010000 		.4byte	.LASF39
 1639 0335 01       		.byte	0x1
 1640 0336 BB02     		.2byte	0x2bb
 1641 0338 6B000000 		.4byte	0x6b
 1642 033c 02       		.uleb128 0x2
 1643 033d 91       		.byte	0x91
 1644 033e 76       		.sleb128 -10
 1645 033f 00       		.byte	0
 1646 0340 10       		.uleb128 0x10
 1647 0341 68040000 		.4byte	.LASF41
 1648 0345 01       		.byte	0x1
 1649 0346 E502     		.2byte	0x2e5
 1650 0348 00000000 		.4byte	.LFB9
 1651 034c 68000000 		.4byte	.LFE9-.LFB9
 1652 0350 01       		.uleb128 0x1
 1653 0351 9C       		.byte	0x9c
 1654 0352 A2030000 		.4byte	0x3a2
 1655 0356 0D       		.uleb128 0xd
 1656 0357 8A030000 		.4byte	.LASF21
 1657 035b 01       		.byte	0x1
 1658 035c E502     		.2byte	0x2e5
 1659 035e 6B000000 		.4byte	0x6b
 1660 0362 02       		.uleb128 0x2
 1661 0363 91       		.byte	0x91
 1662 0364 6F       		.sleb128 -17
 1663 0365 0B       		.uleb128 0xb
 1664 0366 706F7300 		.ascii	"pos\000"
 1665 036a 01       		.byte	0x1
 1666 036b E802     		.2byte	0x2e8
 1667 036d 6B000000 		.4byte	0x6b
 1668 0371 02       		.uleb128 0x2
 1669 0372 91       		.byte	0x91
 1670 0373 75       		.sleb128 -11
 1671 0374 0C       		.uleb128 0xc
 1672 0375 D6020000 		.4byte	.LASF23
 1673 0379 01       		.byte	0x1
 1674 037a E902     		.2byte	0x2e9
 1675 037c 6B000000 		.4byte	0x6b
 1676 0380 02       		.uleb128 0x2
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 63


 1677 0381 91       		.byte	0x91
 1678 0382 74       		.sleb128 -12
 1679 0383 0C       		.uleb128 0xc
 1680 0384 6E010000 		.4byte	.LASF37
 1681 0388 01       		.byte	0x1
 1682 0389 EA02     		.2byte	0x2ea
 1683 038b 6B000000 		.4byte	0x6b
 1684 038f 02       		.uleb128 0x2
 1685 0390 91       		.byte	0x91
 1686 0391 77       		.sleb128 -9
 1687 0392 0C       		.uleb128 0xc
 1688 0393 77010000 		.4byte	.LASF38
 1689 0397 01       		.byte	0x1
 1690 0398 EB02     		.2byte	0x2eb
 1691 039a 6B000000 		.4byte	0x6b
 1692 039e 02       		.uleb128 0x2
 1693 039f 91       		.byte	0x91
 1694 03a0 76       		.sleb128 -10
 1695 03a1 00       		.byte	0
 1696 03a2 10       		.uleb128 0x10
 1697 03a3 8A050000 		.4byte	.LASF42
 1698 03a7 01       		.byte	0x1
 1699 03a8 1703     		.2byte	0x317
 1700 03aa 00000000 		.4byte	.LFB10
 1701 03ae 6C000000 		.4byte	.LFE10-.LFB10
 1702 03b2 01       		.uleb128 0x1
 1703 03b3 9C       		.byte	0x9c
 1704 03b4 04040000 		.4byte	0x404
 1705 03b8 0D       		.uleb128 0xd
 1706 03b9 8A030000 		.4byte	.LASF21
 1707 03bd 01       		.byte	0x1
 1708 03be 1703     		.2byte	0x317
 1709 03c0 6B000000 		.4byte	0x6b
 1710 03c4 02       		.uleb128 0x2
 1711 03c5 91       		.byte	0x91
 1712 03c6 6F       		.sleb128 -17
 1713 03c7 0B       		.uleb128 0xb
 1714 03c8 706F7300 		.ascii	"pos\000"
 1715 03cc 01       		.byte	0x1
 1716 03cd 1A03     		.2byte	0x31a
 1717 03cf 6B000000 		.4byte	0x6b
 1718 03d3 02       		.uleb128 0x2
 1719 03d4 91       		.byte	0x91
 1720 03d5 75       		.sleb128 -11
 1721 03d6 0C       		.uleb128 0xc
 1722 03d7 D6020000 		.4byte	.LASF23
 1723 03db 01       		.byte	0x1
 1724 03dc 1B03     		.2byte	0x31b
 1725 03de 6B000000 		.4byte	0x6b
 1726 03e2 02       		.uleb128 0x2
 1727 03e3 91       		.byte	0x91
 1728 03e4 74       		.sleb128 -12
 1729 03e5 0C       		.uleb128 0xc
 1730 03e6 6E010000 		.4byte	.LASF37
 1731 03ea 01       		.byte	0x1
 1732 03eb 1C03     		.2byte	0x31c
 1733 03ed 6B000000 		.4byte	0x6b
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 64


 1734 03f1 02       		.uleb128 0x2
 1735 03f2 91       		.byte	0x91
 1736 03f3 77       		.sleb128 -9
 1737 03f4 0C       		.uleb128 0xc
 1738 03f5 77010000 		.4byte	.LASF38
 1739 03f9 01       		.byte	0x1
 1740 03fa 1D03     		.2byte	0x31d
 1741 03fc 6B000000 		.4byte	0x6b
 1742 0400 02       		.uleb128 0x2
 1743 0401 91       		.byte	0x91
 1744 0402 76       		.sleb128 -10
 1745 0403 00       		.byte	0
 1746 0404 0E       		.uleb128 0xe
 1747 0405 6F000000 		.4byte	.LASF43
 1748 0409 01       		.byte	0x1
 1749 040a 2607     		.2byte	0x726
 1750 040c 77000000 		.4byte	0x77
 1751 0410 00000000 		.4byte	.LFB11
 1752 0414 48000000 		.4byte	.LFE11-.LFB11
 1753 0418 01       		.uleb128 0x1
 1754 0419 9C       		.byte	0x9c
 1755 041a 58040000 		.4byte	0x458
 1756 041e 11       		.uleb128 0x11
 1757 041f 783100   		.ascii	"x1\000"
 1758 0422 01       		.byte	0x1
 1759 0423 2607     		.2byte	0x726
 1760 0425 77000000 		.4byte	0x77
 1761 0429 02       		.uleb128 0x2
 1762 042a 91       		.byte	0x91
 1763 042b 6E       		.sleb128 -18
 1764 042c 11       		.uleb128 0x11
 1765 042d 783200   		.ascii	"x2\000"
 1766 0430 01       		.byte	0x1
 1767 0431 2607     		.2byte	0x726
 1768 0433 77000000 		.4byte	0x77
 1769 0437 02       		.uleb128 0x2
 1770 0438 91       		.byte	0x91
 1771 0439 6C       		.sleb128 -20
 1772 043a 11       		.uleb128 0x11
 1773 043b 783300   		.ascii	"x3\000"
 1774 043e 01       		.byte	0x1
 1775 043f 2607     		.2byte	0x726
 1776 0441 77000000 		.4byte	0x77
 1777 0445 02       		.uleb128 0x2
 1778 0446 91       		.byte	0x91
 1779 0447 6A       		.sleb128 -22
 1780 0448 0B       		.uleb128 0xb
 1781 0449 746D7000 		.ascii	"tmp\000"
 1782 044d 01       		.byte	0x1
 1783 044e 2907     		.2byte	0x729
 1784 0450 77000000 		.4byte	0x77
 1785 0454 02       		.uleb128 0x2
 1786 0455 91       		.byte	0x91
 1787 0456 76       		.sleb128 -10
 1788 0457 00       		.byte	0
 1789 0458 12       		.uleb128 0x12
 1790 0459 77000000 		.4byte	0x77
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 65


 1791 045d 68040000 		.4byte	0x468
 1792 0461 13       		.uleb128 0x13
 1793 0462 AB000000 		.4byte	0xab
 1794 0466 01       		.byte	0x1
 1795 0467 00       		.byte	0
 1796 0468 14       		.uleb128 0x14
 1797 0469 98030000 		.4byte	.LASF44
 1798 046d 03       		.byte	0x3
 1799 046e BA02     		.2byte	0x2ba
 1800 0470 58040000 		.4byte	0x458
 1801 0474 15       		.uleb128 0x15
 1802 0475 A6040000 		.4byte	.LASF45
 1803 0479 01       		.byte	0x1
 1804 047a 18       		.byte	0x18
 1805 047b 58040000 		.4byte	0x458
 1806 047f 05       		.uleb128 0x5
 1807 0480 03       		.byte	0x3
 1808 0481 00000000 		.4byte	CapSense_CSD_rawFilterData1
 1809 0485 15       		.uleb128 0x15
 1810 0486 C2040000 		.4byte	.LASF46
 1811 048a 01       		.byte	0x1
 1812 048b 19       		.byte	0x19
 1813 048c 58040000 		.4byte	0x458
 1814 0490 05       		.uleb128 0x5
 1815 0491 03       		.byte	0x3
 1816 0492 00000000 		.4byte	CapSense_CSD_rawFilterData2
 1817 0496 12       		.uleb128 0x12
 1818 0497 6B000000 		.4byte	0x6b
 1819 049b A6040000 		.4byte	0x4a6
 1820 049f 13       		.uleb128 0x13
 1821 04a0 AB000000 		.4byte	0xab
 1822 04a4 00       		.byte	0
 1823 04a5 00       		.byte	0
 1824 04a6 14       		.uleb128 0x14
 1825 04a7 DD020000 		.4byte	.LASF47
 1826 04ab 04       		.byte	0x4
 1827 04ac 0401     		.2byte	0x104
 1828 04ae 96040000 		.4byte	0x496
 1829 04b2 12       		.uleb128 0x12
 1830 04b3 C2040000 		.4byte	0x4c2
 1831 04b7 C2040000 		.4byte	0x4c2
 1832 04bb 13       		.uleb128 0x13
 1833 04bc AB000000 		.4byte	0xab
 1834 04c0 01       		.byte	0x1
 1835 04c1 00       		.byte	0
 1836 04c2 16       		.uleb128 0x16
 1837 04c3 6B000000 		.4byte	0x6b
 1838 04c7 14       		.uleb128 0x14
 1839 04c8 B7010000 		.4byte	.LASF48
 1840 04cc 04       		.byte	0x4
 1841 04cd 0501     		.2byte	0x105
 1842 04cf D3040000 		.4byte	0x4d3
 1843 04d3 16       		.uleb128 0x16
 1844 04d4 B2040000 		.4byte	0x4b2
 1845 04d8 15       		.uleb128 0x15
 1846 04d9 06020000 		.4byte	.LASF49
 1847 04dd 01       		.byte	0x1
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 66


 1848 04de 29       		.byte	0x29
 1849 04df 58040000 		.4byte	0x458
 1850 04e3 05       		.uleb128 0x5
 1851 04e4 03       		.byte	0x3
 1852 04e5 00000000 		.4byte	CapSense_CSD_sensorBaseline
 1853 04e9 12       		.uleb128 0x12
 1854 04ea 6B000000 		.4byte	0x6b
 1855 04ee F9040000 		.4byte	0x4f9
 1856 04f2 13       		.uleb128 0x13
 1857 04f3 AB000000 		.4byte	0xab
 1858 04f7 01       		.byte	0x1
 1859 04f8 00       		.byte	0
 1860 04f9 15       		.uleb128 0x15
 1861 04fa 63050000 		.4byte	.LASF50
 1862 04fe 01       		.byte	0x1
 1863 04ff 2A       		.byte	0x2a
 1864 0500 E9040000 		.4byte	0x4e9
 1865 0504 05       		.uleb128 0x5
 1866 0505 03       		.byte	0x3
 1867 0506 00000000 		.4byte	CapSense_CSD_sensorBaselineLow
 1868 050a 15       		.uleb128 0x15
 1869 050b 57020000 		.4byte	.LASF51
 1870 050f 01       		.byte	0x1
 1871 0510 2B       		.byte	0x2b
 1872 0511 58040000 		.4byte	0x458
 1873 0515 05       		.uleb128 0x5
 1874 0516 03       		.byte	0x3
 1875 0517 00000000 		.4byte	CapSense_CSD_sensorSignal
 1876 051b 15       		.uleb128 0x15
 1877 051c A5050000 		.4byte	.LASF52
 1878 0520 01       		.byte	0x1
 1879 0521 2C       		.byte	0x2c
 1880 0522 96040000 		.4byte	0x496
 1881 0526 05       		.uleb128 0x5
 1882 0527 03       		.byte	0x3
 1883 0528 00000000 		.4byte	CapSense_CSD_sensorOnMask
 1884 052c 15       		.uleb128 0x15
 1885 052d 01030000 		.4byte	.LASF53
 1886 0531 01       		.byte	0x1
 1887 0532 2E       		.byte	0x2e
 1888 0533 E9040000 		.4byte	0x4e9
 1889 0537 05       		.uleb128 0x5
 1890 0538 03       		.byte	0x3
 1891 0539 00000000 		.4byte	CapSense_CSD_lowBaselineResetCnt
 1892 053d 15       		.uleb128 0x15
 1893 053e 46030000 		.4byte	.LASF54
 1894 0542 01       		.byte	0x1
 1895 0543 30       		.byte	0x30
 1896 0544 58040000 		.4byte	0x458
 1897 0548 05       		.uleb128 0x5
 1898 0549 03       		.byte	0x3
 1899 054a 00000000 		.4byte	CapSense_CSD_fingerThreshold
 1900 054e 15       		.uleb128 0x15
 1901 054f 47040000 		.4byte	.LASF55
 1902 0553 01       		.byte	0x1
 1903 0554 34       		.byte	0x34
 1904 0555 58040000 		.4byte	0x458
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 67


 1905 0559 05       		.uleb128 0x5
 1906 055a 03       		.byte	0x3
 1907 055b 00000000 		.4byte	CapSense_CSD_noiseThreshold
 1908 055f 15       		.uleb128 0x15
 1909 0560 DE040000 		.4byte	.LASF56
 1910 0564 01       		.byte	0x1
 1911 0565 38       		.byte	0x38
 1912 0566 58040000 		.4byte	0x458
 1913 056a 05       		.uleb128 0x5
 1914 056b 03       		.byte	0x3
 1915 056c 00000000 		.4byte	CapSense_CSD_hysteresis
 1916 0570 15       		.uleb128 0x15
 1917 0571 22020000 		.4byte	.LASF57
 1918 0575 01       		.byte	0x1
 1919 0576 3C       		.byte	0x3c
 1920 0577 E9040000 		.4byte	0x4e9
 1921 057b 05       		.uleb128 0x5
 1922 057c 03       		.byte	0x3
 1923 057d 00000000 		.4byte	CapSense_CSD_debounce
 1924 0581 12       		.uleb128 0x12
 1925 0582 6B000000 		.4byte	0x6b
 1926 0586 91050000 		.4byte	0x591
 1927 058a 13       		.uleb128 0x13
 1928 058b AB000000 		.4byte	0xab
 1929 058f 02       		.byte	0x2
 1930 0590 00       		.byte	0
 1931 0591 15       		.uleb128 0x15
 1932 0592 2B000000 		.4byte	.LASF58
 1933 0596 01       		.byte	0x1
 1934 0597 40       		.byte	0x40
 1935 0598 81050000 		.4byte	0x581
 1936 059c 05       		.uleb128 0x5
 1937 059d 03       		.byte	0x3
 1938 059e 00000000 		.4byte	CapSense_CSD_debounceCounter
 1939 05a2 15       		.uleb128 0x15
 1940 05a3 49050000 		.4byte	.LASF59
 1941 05a7 01       		.byte	0x1
 1942 05a8 44       		.byte	0x44
 1943 05a9 B3050000 		.4byte	0x5b3
 1944 05ad 05       		.uleb128 0x5
 1945 05ae 03       		.byte	0x3
 1946 05af 00000000 		.4byte	CapSense_CSD_rawDataIndex
 1947 05b3 16       		.uleb128 0x16
 1948 05b4 B2040000 		.4byte	0x4b2
 1949 05b8 15       		.uleb128 0x15
 1950 05b9 D1030000 		.4byte	.LASF60
 1951 05bd 01       		.byte	0x1
 1952 05be 4A       		.byte	0x4a
 1953 05bf C9050000 		.4byte	0x5c9
 1954 05c3 05       		.uleb128 0x5
 1955 05c4 03       		.byte	0x3
 1956 05c5 00000000 		.4byte	CapSense_CSD_numberOfSensors
 1957 05c9 16       		.uleb128 0x16
 1958 05ca B2040000 		.4byte	0x4b2
 1959 05ce 00       		.byte	0
 1960              		.section	.debug_abbrev,"",%progbits
 1961              	.Ldebug_abbrev0:
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 68


 1962 0000 01       		.uleb128 0x1
 1963 0001 11       		.uleb128 0x11
 1964 0002 01       		.byte	0x1
 1965 0003 25       		.uleb128 0x25
 1966 0004 0E       		.uleb128 0xe
 1967 0005 13       		.uleb128 0x13
 1968 0006 0B       		.uleb128 0xb
 1969 0007 03       		.uleb128 0x3
 1970 0008 0E       		.uleb128 0xe
 1971 0009 1B       		.uleb128 0x1b
 1972 000a 0E       		.uleb128 0xe
 1973 000b 55       		.uleb128 0x55
 1974 000c 17       		.uleb128 0x17
 1975 000d 11       		.uleb128 0x11
 1976 000e 01       		.uleb128 0x1
 1977 000f 10       		.uleb128 0x10
 1978 0010 17       		.uleb128 0x17
 1979 0011 00       		.byte	0
 1980 0012 00       		.byte	0
 1981 0013 02       		.uleb128 0x2
 1982 0014 24       		.uleb128 0x24
 1983 0015 00       		.byte	0
 1984 0016 0B       		.uleb128 0xb
 1985 0017 0B       		.uleb128 0xb
 1986 0018 3E       		.uleb128 0x3e
 1987 0019 0B       		.uleb128 0xb
 1988 001a 03       		.uleb128 0x3
 1989 001b 0E       		.uleb128 0xe
 1990 001c 00       		.byte	0
 1991 001d 00       		.byte	0
 1992 001e 03       		.uleb128 0x3
 1993 001f 24       		.uleb128 0x24
 1994 0020 00       		.byte	0
 1995 0021 0B       		.uleb128 0xb
 1996 0022 0B       		.uleb128 0xb
 1997 0023 3E       		.uleb128 0x3e
 1998 0024 0B       		.uleb128 0xb
 1999 0025 03       		.uleb128 0x3
 2000 0026 08       		.uleb128 0x8
 2001 0027 00       		.byte	0
 2002 0028 00       		.byte	0
 2003 0029 04       		.uleb128 0x4
 2004 002a 16       		.uleb128 0x16
 2005 002b 00       		.byte	0
 2006 002c 03       		.uleb128 0x3
 2007 002d 0E       		.uleb128 0xe
 2008 002e 3A       		.uleb128 0x3a
 2009 002f 0B       		.uleb128 0xb
 2010 0030 3B       		.uleb128 0x3b
 2011 0031 05       		.uleb128 0x5
 2012 0032 49       		.uleb128 0x49
 2013 0033 13       		.uleb128 0x13
 2014 0034 00       		.byte	0
 2015 0035 00       		.byte	0
 2016 0036 05       		.uleb128 0x5
 2017 0037 2E       		.uleb128 0x2e
 2018 0038 01       		.byte	0x1
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 69


 2019 0039 3F       		.uleb128 0x3f
 2020 003a 19       		.uleb128 0x19
 2021 003b 03       		.uleb128 0x3
 2022 003c 0E       		.uleb128 0xe
 2023 003d 3A       		.uleb128 0x3a
 2024 003e 0B       		.uleb128 0xb
 2025 003f 3B       		.uleb128 0x3b
 2026 0040 0B       		.uleb128 0xb
 2027 0041 27       		.uleb128 0x27
 2028 0042 19       		.uleb128 0x19
 2029 0043 11       		.uleb128 0x11
 2030 0044 01       		.uleb128 0x1
 2031 0045 12       		.uleb128 0x12
 2032 0046 06       		.uleb128 0x6
 2033 0047 40       		.uleb128 0x40
 2034 0048 18       		.uleb128 0x18
 2035 0049 9742     		.uleb128 0x2117
 2036 004b 19       		.uleb128 0x19
 2037 004c 01       		.uleb128 0x1
 2038 004d 13       		.uleb128 0x13
 2039 004e 00       		.byte	0
 2040 004f 00       		.byte	0
 2041 0050 06       		.uleb128 0x6
 2042 0051 05       		.uleb128 0x5
 2043 0052 00       		.byte	0
 2044 0053 03       		.uleb128 0x3
 2045 0054 0E       		.uleb128 0xe
 2046 0055 3A       		.uleb128 0x3a
 2047 0056 0B       		.uleb128 0xb
 2048 0057 3B       		.uleb128 0x3b
 2049 0058 0B       		.uleb128 0xb
 2050 0059 49       		.uleb128 0x49
 2051 005a 13       		.uleb128 0x13
 2052 005b 02       		.uleb128 0x2
 2053 005c 18       		.uleb128 0x18
 2054 005d 00       		.byte	0
 2055 005e 00       		.byte	0
 2056 005f 07       		.uleb128 0x7
 2057 0060 34       		.uleb128 0x34
 2058 0061 00       		.byte	0
 2059 0062 03       		.uleb128 0x3
 2060 0063 0E       		.uleb128 0xe
 2061 0064 3A       		.uleb128 0x3a
 2062 0065 0B       		.uleb128 0xb
 2063 0066 3B       		.uleb128 0x3b
 2064 0067 0B       		.uleb128 0xb
 2065 0068 49       		.uleb128 0x49
 2066 0069 13       		.uleb128 0x13
 2067 006a 02       		.uleb128 0x2
 2068 006b 18       		.uleb128 0x18
 2069 006c 00       		.byte	0
 2070 006d 00       		.byte	0
 2071 006e 08       		.uleb128 0x8
 2072 006f 2E       		.uleb128 0x2e
 2073 0070 01       		.byte	0x1
 2074 0071 3F       		.uleb128 0x3f
 2075 0072 19       		.uleb128 0x19
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 70


 2076 0073 03       		.uleb128 0x3
 2077 0074 0E       		.uleb128 0xe
 2078 0075 3A       		.uleb128 0x3a
 2079 0076 0B       		.uleb128 0xb
 2080 0077 3B       		.uleb128 0x3b
 2081 0078 0B       		.uleb128 0xb
 2082 0079 27       		.uleb128 0x27
 2083 007a 19       		.uleb128 0x19
 2084 007b 11       		.uleb128 0x11
 2085 007c 01       		.uleb128 0x1
 2086 007d 12       		.uleb128 0x12
 2087 007e 06       		.uleb128 0x6
 2088 007f 40       		.uleb128 0x40
 2089 0080 18       		.uleb128 0x18
 2090 0081 9642     		.uleb128 0x2116
 2091 0083 19       		.uleb128 0x19
 2092 0084 01       		.uleb128 0x1
 2093 0085 13       		.uleb128 0x13
 2094 0086 00       		.byte	0
 2095 0087 00       		.byte	0
 2096 0088 09       		.uleb128 0x9
 2097 0089 34       		.uleb128 0x34
 2098 008a 00       		.byte	0
 2099 008b 03       		.uleb128 0x3
 2100 008c 08       		.uleb128 0x8
 2101 008d 3A       		.uleb128 0x3a
 2102 008e 0B       		.uleb128 0xb
 2103 008f 3B       		.uleb128 0x3b
 2104 0090 0B       		.uleb128 0xb
 2105 0091 49       		.uleb128 0x49
 2106 0092 13       		.uleb128 0x13
 2107 0093 02       		.uleb128 0x2
 2108 0094 18       		.uleb128 0x18
 2109 0095 00       		.byte	0
 2110 0096 00       		.byte	0
 2111 0097 0A       		.uleb128 0xa
 2112 0098 2E       		.uleb128 0x2e
 2113 0099 01       		.byte	0x1
 2114 009a 3F       		.uleb128 0x3f
 2115 009b 19       		.uleb128 0x19
 2116 009c 03       		.uleb128 0x3
 2117 009d 0E       		.uleb128 0xe
 2118 009e 3A       		.uleb128 0x3a
 2119 009f 0B       		.uleb128 0xb
 2120 00a0 3B       		.uleb128 0x3b
 2121 00a1 05       		.uleb128 0x5
 2122 00a2 27       		.uleb128 0x27
 2123 00a3 19       		.uleb128 0x19
 2124 00a4 11       		.uleb128 0x11
 2125 00a5 01       		.uleb128 0x1
 2126 00a6 12       		.uleb128 0x12
 2127 00a7 06       		.uleb128 0x6
 2128 00a8 40       		.uleb128 0x40
 2129 00a9 18       		.uleb128 0x18
 2130 00aa 9642     		.uleb128 0x2116
 2131 00ac 19       		.uleb128 0x19
 2132 00ad 01       		.uleb128 0x1
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 71


 2133 00ae 13       		.uleb128 0x13
 2134 00af 00       		.byte	0
 2135 00b0 00       		.byte	0
 2136 00b1 0B       		.uleb128 0xb
 2137 00b2 34       		.uleb128 0x34
 2138 00b3 00       		.byte	0
 2139 00b4 03       		.uleb128 0x3
 2140 00b5 08       		.uleb128 0x8
 2141 00b6 3A       		.uleb128 0x3a
 2142 00b7 0B       		.uleb128 0xb
 2143 00b8 3B       		.uleb128 0x3b
 2144 00b9 05       		.uleb128 0x5
 2145 00ba 49       		.uleb128 0x49
 2146 00bb 13       		.uleb128 0x13
 2147 00bc 02       		.uleb128 0x2
 2148 00bd 18       		.uleb128 0x18
 2149 00be 00       		.byte	0
 2150 00bf 00       		.byte	0
 2151 00c0 0C       		.uleb128 0xc
 2152 00c1 34       		.uleb128 0x34
 2153 00c2 00       		.byte	0
 2154 00c3 03       		.uleb128 0x3
 2155 00c4 0E       		.uleb128 0xe
 2156 00c5 3A       		.uleb128 0x3a
 2157 00c6 0B       		.uleb128 0xb
 2158 00c7 3B       		.uleb128 0x3b
 2159 00c8 05       		.uleb128 0x5
 2160 00c9 49       		.uleb128 0x49
 2161 00ca 13       		.uleb128 0x13
 2162 00cb 02       		.uleb128 0x2
 2163 00cc 18       		.uleb128 0x18
 2164 00cd 00       		.byte	0
 2165 00ce 00       		.byte	0
 2166 00cf 0D       		.uleb128 0xd
 2167 00d0 05       		.uleb128 0x5
 2168 00d1 00       		.byte	0
 2169 00d2 03       		.uleb128 0x3
 2170 00d3 0E       		.uleb128 0xe
 2171 00d4 3A       		.uleb128 0x3a
 2172 00d5 0B       		.uleb128 0xb
 2173 00d6 3B       		.uleb128 0x3b
 2174 00d7 05       		.uleb128 0x5
 2175 00d8 49       		.uleb128 0x49
 2176 00d9 13       		.uleb128 0x13
 2177 00da 02       		.uleb128 0x2
 2178 00db 18       		.uleb128 0x18
 2179 00dc 00       		.byte	0
 2180 00dd 00       		.byte	0
 2181 00de 0E       		.uleb128 0xe
 2182 00df 2E       		.uleb128 0x2e
 2183 00e0 01       		.byte	0x1
 2184 00e1 3F       		.uleb128 0x3f
 2185 00e2 19       		.uleb128 0x19
 2186 00e3 03       		.uleb128 0x3
 2187 00e4 0E       		.uleb128 0xe
 2188 00e5 3A       		.uleb128 0x3a
 2189 00e6 0B       		.uleb128 0xb
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 72


 2190 00e7 3B       		.uleb128 0x3b
 2191 00e8 05       		.uleb128 0x5
 2192 00e9 27       		.uleb128 0x27
 2193 00ea 19       		.uleb128 0x19
 2194 00eb 49       		.uleb128 0x49
 2195 00ec 13       		.uleb128 0x13
 2196 00ed 11       		.uleb128 0x11
 2197 00ee 01       		.uleb128 0x1
 2198 00ef 12       		.uleb128 0x12
 2199 00f0 06       		.uleb128 0x6
 2200 00f1 40       		.uleb128 0x40
 2201 00f2 18       		.uleb128 0x18
 2202 00f3 9742     		.uleb128 0x2117
 2203 00f5 19       		.uleb128 0x19
 2204 00f6 01       		.uleb128 0x1
 2205 00f7 13       		.uleb128 0x13
 2206 00f8 00       		.byte	0
 2207 00f9 00       		.byte	0
 2208 00fa 0F       		.uleb128 0xf
 2209 00fb 2E       		.uleb128 0x2e
 2210 00fc 01       		.byte	0x1
 2211 00fd 3F       		.uleb128 0x3f
 2212 00fe 19       		.uleb128 0x19
 2213 00ff 03       		.uleb128 0x3
 2214 0100 0E       		.uleb128 0xe
 2215 0101 3A       		.uleb128 0x3a
 2216 0102 0B       		.uleb128 0xb
 2217 0103 3B       		.uleb128 0x3b
 2218 0104 05       		.uleb128 0x5
 2219 0105 27       		.uleb128 0x27
 2220 0106 19       		.uleb128 0x19
 2221 0107 49       		.uleb128 0x49
 2222 0108 13       		.uleb128 0x13
 2223 0109 11       		.uleb128 0x11
 2224 010a 01       		.uleb128 0x1
 2225 010b 12       		.uleb128 0x12
 2226 010c 06       		.uleb128 0x6
 2227 010d 40       		.uleb128 0x40
 2228 010e 18       		.uleb128 0x18
 2229 010f 9642     		.uleb128 0x2116
 2230 0111 19       		.uleb128 0x19
 2231 0112 01       		.uleb128 0x1
 2232 0113 13       		.uleb128 0x13
 2233 0114 00       		.byte	0
 2234 0115 00       		.byte	0
 2235 0116 10       		.uleb128 0x10
 2236 0117 2E       		.uleb128 0x2e
 2237 0118 01       		.byte	0x1
 2238 0119 3F       		.uleb128 0x3f
 2239 011a 19       		.uleb128 0x19
 2240 011b 03       		.uleb128 0x3
 2241 011c 0E       		.uleb128 0xe
 2242 011d 3A       		.uleb128 0x3a
 2243 011e 0B       		.uleb128 0xb
 2244 011f 3B       		.uleb128 0x3b
 2245 0120 05       		.uleb128 0x5
 2246 0121 27       		.uleb128 0x27
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 73


 2247 0122 19       		.uleb128 0x19
 2248 0123 11       		.uleb128 0x11
 2249 0124 01       		.uleb128 0x1
 2250 0125 12       		.uleb128 0x12
 2251 0126 06       		.uleb128 0x6
 2252 0127 40       		.uleb128 0x40
 2253 0128 18       		.uleb128 0x18
 2254 0129 9742     		.uleb128 0x2117
 2255 012b 19       		.uleb128 0x19
 2256 012c 01       		.uleb128 0x1
 2257 012d 13       		.uleb128 0x13
 2258 012e 00       		.byte	0
 2259 012f 00       		.byte	0
 2260 0130 11       		.uleb128 0x11
 2261 0131 05       		.uleb128 0x5
 2262 0132 00       		.byte	0
 2263 0133 03       		.uleb128 0x3
 2264 0134 08       		.uleb128 0x8
 2265 0135 3A       		.uleb128 0x3a
 2266 0136 0B       		.uleb128 0xb
 2267 0137 3B       		.uleb128 0x3b
 2268 0138 05       		.uleb128 0x5
 2269 0139 49       		.uleb128 0x49
 2270 013a 13       		.uleb128 0x13
 2271 013b 02       		.uleb128 0x2
 2272 013c 18       		.uleb128 0x18
 2273 013d 00       		.byte	0
 2274 013e 00       		.byte	0
 2275 013f 12       		.uleb128 0x12
 2276 0140 01       		.uleb128 0x1
 2277 0141 01       		.byte	0x1
 2278 0142 49       		.uleb128 0x49
 2279 0143 13       		.uleb128 0x13
 2280 0144 01       		.uleb128 0x1
 2281 0145 13       		.uleb128 0x13
 2282 0146 00       		.byte	0
 2283 0147 00       		.byte	0
 2284 0148 13       		.uleb128 0x13
 2285 0149 21       		.uleb128 0x21
 2286 014a 00       		.byte	0
 2287 014b 49       		.uleb128 0x49
 2288 014c 13       		.uleb128 0x13
 2289 014d 2F       		.uleb128 0x2f
 2290 014e 0B       		.uleb128 0xb
 2291 014f 00       		.byte	0
 2292 0150 00       		.byte	0
 2293 0151 14       		.uleb128 0x14
 2294 0152 34       		.uleb128 0x34
 2295 0153 00       		.byte	0
 2296 0154 03       		.uleb128 0x3
 2297 0155 0E       		.uleb128 0xe
 2298 0156 3A       		.uleb128 0x3a
 2299 0157 0B       		.uleb128 0xb
 2300 0158 3B       		.uleb128 0x3b
 2301 0159 05       		.uleb128 0x5
 2302 015a 49       		.uleb128 0x49
 2303 015b 13       		.uleb128 0x13
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 74


 2304 015c 3F       		.uleb128 0x3f
 2305 015d 19       		.uleb128 0x19
 2306 015e 3C       		.uleb128 0x3c
 2307 015f 19       		.uleb128 0x19
 2308 0160 00       		.byte	0
 2309 0161 00       		.byte	0
 2310 0162 15       		.uleb128 0x15
 2311 0163 34       		.uleb128 0x34
 2312 0164 00       		.byte	0
 2313 0165 03       		.uleb128 0x3
 2314 0166 0E       		.uleb128 0xe
 2315 0167 3A       		.uleb128 0x3a
 2316 0168 0B       		.uleb128 0xb
 2317 0169 3B       		.uleb128 0x3b
 2318 016a 0B       		.uleb128 0xb
 2319 016b 49       		.uleb128 0x49
 2320 016c 13       		.uleb128 0x13
 2321 016d 3F       		.uleb128 0x3f
 2322 016e 19       		.uleb128 0x19
 2323 016f 02       		.uleb128 0x2
 2324 0170 18       		.uleb128 0x18
 2325 0171 00       		.byte	0
 2326 0172 00       		.byte	0
 2327 0173 16       		.uleb128 0x16
 2328 0174 26       		.uleb128 0x26
 2329 0175 00       		.byte	0
 2330 0176 49       		.uleb128 0x49
 2331 0177 13       		.uleb128 0x13
 2332 0178 00       		.byte	0
 2333 0179 00       		.byte	0
 2334 017a 00       		.byte	0
 2335              		.section	.debug_aranges,"",%progbits
 2336 0000 74000000 		.4byte	0x74
 2337 0004 0200     		.2byte	0x2
 2338 0006 00000000 		.4byte	.Ldebug_info0
 2339 000a 04       		.byte	0x4
 2340 000b 00       		.byte	0
 2341 000c 0000     		.2byte	0
 2342 000e 0000     		.2byte	0
 2343 0010 00000000 		.4byte	.LFB0
 2344 0014 90000000 		.4byte	.LFE0-.LFB0
 2345 0018 00000000 		.4byte	.LFB1
 2346 001c 2E000000 		.4byte	.LFE1-.LFB1
 2347 0020 00000000 		.4byte	.LFB2
 2348 0024 28000000 		.4byte	.LFE2-.LFB2
 2349 0028 00000000 		.4byte	.LFB3
 2350 002c 70000000 		.4byte	.LFE3-.LFB3
 2351 0030 00000000 		.4byte	.LFB4
 2352 0034 84010000 		.4byte	.LFE4-.LFB4
 2353 0038 00000000 		.4byte	.LFB5
 2354 003c 50000000 		.4byte	.LFE5-.LFB5
 2355 0040 00000000 		.4byte	.LFB6
 2356 0044 10010000 		.4byte	.LFE6-.LFB6
 2357 0048 00000000 		.4byte	.LFB7
 2358 004c 54000000 		.4byte	.LFE7-.LFB7
 2359 0050 00000000 		.4byte	.LFB8
 2360 0054 38000000 		.4byte	.LFE8-.LFB8
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 75


 2361 0058 00000000 		.4byte	.LFB9
 2362 005c 68000000 		.4byte	.LFE9-.LFB9
 2363 0060 00000000 		.4byte	.LFB10
 2364 0064 6C000000 		.4byte	.LFE10-.LFB10
 2365 0068 00000000 		.4byte	.LFB11
 2366 006c 48000000 		.4byte	.LFE11-.LFB11
 2367 0070 00000000 		.4byte	0
 2368 0074 00000000 		.4byte	0
 2369              		.section	.debug_ranges,"",%progbits
 2370              	.Ldebug_ranges0:
 2371 0000 00000000 		.4byte	.LFB0
 2372 0004 90000000 		.4byte	.LFE0
 2373 0008 00000000 		.4byte	.LFB1
 2374 000c 2E000000 		.4byte	.LFE1
 2375 0010 00000000 		.4byte	.LFB2
 2376 0014 28000000 		.4byte	.LFE2
 2377 0018 00000000 		.4byte	.LFB3
 2378 001c 70000000 		.4byte	.LFE3
 2379 0020 00000000 		.4byte	.LFB4
 2380 0024 84010000 		.4byte	.LFE4
 2381 0028 00000000 		.4byte	.LFB5
 2382 002c 50000000 		.4byte	.LFE5
 2383 0030 00000000 		.4byte	.LFB6
 2384 0034 10010000 		.4byte	.LFE6
 2385 0038 00000000 		.4byte	.LFB7
 2386 003c 54000000 		.4byte	.LFE7
 2387 0040 00000000 		.4byte	.LFB8
 2388 0044 38000000 		.4byte	.LFE8
 2389 0048 00000000 		.4byte	.LFB9
 2390 004c 68000000 		.4byte	.LFE9
 2391 0050 00000000 		.4byte	.LFB10
 2392 0054 6C000000 		.4byte	.LFE10
 2393 0058 00000000 		.4byte	.LFB11
 2394 005c 48000000 		.4byte	.LFE11
 2395 0060 00000000 		.4byte	0
 2396 0064 00000000 		.4byte	0
 2397              		.section	.debug_line,"",%progbits
 2398              	.Ldebug_line0:
 2399 0000 5F020000 		.section	.debug_str,"MS",%progbits,1
 2399      02007700 
 2399      00000201 
 2399      FB0E0D00 
 2399      01010101 
 2400              	.LASF62:
 2401 0000 47656E65 		.ascii	"Generated_Source\\PSoC5\\CapSense_CSD_CSHL.c\000"
 2401      72617465 
 2401      645F536F 
 2401      75726365 
 2401      5C50536F 
 2402              	.LASF58:
 2403 002b 43617053 		.ascii	"CapSense_CSD_debounceCounter\000"
 2403      656E7365 
 2403      5F435344 
 2403      5F646562 
 2403      6F756E63 
 2404              	.LASF10:
 2405 0048 75696E74 		.ascii	"uint16\000"
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 76


 2405      313600
 2406              	.LASF27:
 2407 004f 66696C74 		.ascii	"filteredRawData\000"
 2407      65726564 
 2407      52617744 
 2407      61746100 
 2408              	.LASF32:
 2409 005f 66696E67 		.ascii	"fingerThreshold\000"
 2409      65725468 
 2409      72657368 
 2409      6F6C6400 
 2410              	.LASF43:
 2411 006f 43617053 		.ascii	"CapSense_CSD_MedianFilter\000"
 2411      656E7365 
 2411      5F435344 
 2411      5F4D6564 
 2411      69616E46 
 2412              	.LASF18:
 2413 0089 43617053 		.ascii	"CapSense_CSD_InitializeSensorBaseline\000"
 2413      656E7365 
 2413      5F435344 
 2413      5F496E69 
 2413      7469616C 
 2414              	.LASF61:
 2415 00af 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2415      43313120 
 2415      352E342E 
 2415      31203230 
 2415      31363036 
 2416 00e2 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 2416      20726576 
 2416      6973696F 
 2416      6E203233 
 2416      37373135 
 2417 0115 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2417      66756E63 
 2417      74696F6E 
 2417      2D736563 
 2417      74696F6E 
 2418              	.LASF7:
 2419 013d 6C6F6E67 		.ascii	"long long unsigned int\000"
 2419      206C6F6E 
 2419      6720756E 
 2419      7369676E 
 2419      65642069 
 2420              	.LASF6:
 2421 0154 6C6F6E67 		.ascii	"long long int\000"
 2421      206C6F6E 
 2421      6720696E 
 2421      7400
 2422              	.LASF0:
 2423 0162 7369676E 		.ascii	"signed char\000"
 2423      65642063 
 2423      68617200 
 2424              	.LASF37:
 2425 016e 72617749 		.ascii	"rawIndex\000"
 2425      6E646578 
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 77


 2425      00
 2426              	.LASF38:
 2427 0177 6E756D62 		.ascii	"numberOfSensors\000"
 2427      65724F66 
 2427      53656E73 
 2427      6F727300 
 2428              	.LASF35:
 2429 0187 43617053 		.ascii	"CapSense_CSD_CheckIsSensorActive\000"
 2429      656E7365 
 2429      5F435344 
 2429      5F436865 
 2429      636B4973 
 2430              	.LASF39:
 2431 01a8 73746174 		.ascii	"state\000"
 2431      6500
 2432              	.LASF4:
 2433 01ae 6C6F6E67 		.ascii	"long int\000"
 2433      20696E74 
 2433      00
 2434              	.LASF48:
 2435 01b7 43617053 		.ascii	"CapSense_CSD_widgetNumber\000"
 2435      656E7365 
 2435      5F435344 
 2435      5F776964 
 2435      6765744E 
 2436              	.LASF9:
 2437 01d1 75696E74 		.ascii	"uint8\000"
 2437      3800
 2438              	.LASF13:
 2439 01d7 646F7562 		.ascii	"double\000"
 2439      6C6500
 2440              	.LASF11:
 2441 01de 75696E74 		.ascii	"uint32\000"
 2441      333200
 2442              	.LASF33:
 2443 01e5 68797374 		.ascii	"hysteresis\000"
 2443      65726573 
 2443      697300
 2444              	.LASF17:
 2445 01f0 43617053 		.ascii	"CapSense_CSD_BaseInit\000"
 2445      656E7365 
 2445      5F435344 
 2445      5F426173 
 2445      65496E69 
 2446              	.LASF49:
 2447 0206 43617053 		.ascii	"CapSense_CSD_sensorBaseline\000"
 2447      656E7365 
 2447      5F435344 
 2447      5F73656E 
 2447      736F7242 
 2448              	.LASF57:
 2449 0222 43617053 		.ascii	"CapSense_CSD_debounce\000"
 2449      656E7365 
 2449      5F435344 
 2449      5F646562 
 2449      6F756E63 
 2450              	.LASF8:
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 78


 2451 0238 756E7369 		.ascii	"unsigned int\000"
 2451      676E6564 
 2451      20696E74 
 2451      00
 2452              	.LASF5:
 2453 0245 6C6F6E67 		.ascii	"long unsigned int\000"
 2453      20756E73 
 2453      69676E65 
 2453      6420696E 
 2453      7400
 2454              	.LASF51:
 2455 0257 43617053 		.ascii	"CapSense_CSD_sensorSignal\000"
 2455      656E7365 
 2455      5F435344 
 2455      5F73656E 
 2455      736F7253 
 2456              	.LASF3:
 2457 0271 73686F72 		.ascii	"short unsigned int\000"
 2457      7420756E 
 2457      7369676E 
 2457      65642069 
 2457      6E7400
 2458              	.LASF19:
 2459 0284 73656E73 		.ascii	"sensor\000"
 2459      6F7200
 2460              	.LASF25:
 2461 028b 63616C63 		.ascii	"calc\000"
 2461      00
 2462              	.LASF34:
 2463 0290 6465626F 		.ascii	"debounce\000"
 2463      756E6365 
 2463      00
 2464              	.LASF16:
 2465 0299 73697A65 		.ascii	"sizetype\000"
 2465      74797065 
 2465      00
 2466              	.LASF15:
 2467 02a2 6C6F6E67 		.ascii	"long double\000"
 2467      20646F75 
 2467      626C6500 
 2468              	.LASF22:
 2469 02ae 43617053 		.ascii	"CapSense_CSD_InitializeEnabledBaselines\000"
 2469      656E7365 
 2469      5F435344 
 2469      5F496E69 
 2469      7469616C 
 2470              	.LASF23:
 2471 02d6 656E4D61 		.ascii	"enMask\000"
 2471      736B00
 2472              	.LASF47:
 2473 02dd 43617053 		.ascii	"CapSense_CSD_sensorEnableMask\000"
 2473      656E7365 
 2473      5F435344 
 2473      5F73656E 
 2473      736F7245 
 2474              	.LASF12:
 2475 02fb 666C6F61 		.ascii	"float\000"
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 79


 2475      7400
 2476              	.LASF53:
 2477 0301 43617053 		.ascii	"CapSense_CSD_lowBaselineResetCnt\000"
 2477      656E7365 
 2477      5F435344 
 2477      5F6C6F77 
 2477      42617365 
 2478              	.LASF20:
 2479 0322 43617053 		.ascii	"CapSense_CSD_InitializeAllBaselines\000"
 2479      656E7365 
 2479      5F435344 
 2479      5F496E69 
 2479      7469616C 
 2480              	.LASF54:
 2481 0346 43617053 		.ascii	"CapSense_CSD_fingerThreshold\000"
 2481      656E7365 
 2481      5F435344 
 2481      5F66696E 
 2481      67657254 
 2482              	.LASF1:
 2483 0363 756E7369 		.ascii	"unsigned char\000"
 2483      676E6564 
 2483      20636861 
 2483      7200
 2484              	.LASF28:
 2485 0371 6E6F6973 		.ascii	"noiseThreshold\000"
 2485      65546872 
 2485      6573686F 
 2485      6C6400
 2486              	.LASF2:
 2487 0380 73686F72 		.ascii	"short int\000"
 2487      7420696E 
 2487      7400
 2488              	.LASF21:
 2489 038a 77696467 		.ascii	"widget\000"
 2489      657400
 2490              	.LASF31:
 2491 0391 6F6E4D61 		.ascii	"onMask\000"
 2491      736B00
 2492              	.LASF44:
 2493 0398 43617053 		.ascii	"CapSense_CSD_sensorRaw\000"
 2493      656E7365 
 2493      5F435344 
 2493      5F73656E 
 2493      736F7252 
 2494              	.LASF24:
 2495 03af 43617053 		.ascii	"CapSense_CSD_UpdateSensorBaseline\000"
 2495      656E7365 
 2495      5F435344 
 2495      5F557064 
 2495      61746553 
 2496              	.LASF60:
 2497 03d1 43617053 		.ascii	"CapSense_CSD_numberOfSensors\000"
 2497      656E7365 
 2497      5F435344 
 2497      5F6E756D 
 2497      6265724F 
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 80


 2498              	.LASF63:
 2499 03ee 483A5C50 		.ascii	"H:\\P4P\\New\\P4P_Project-130\\Capsense_stuff\\Cap_"
 2499      34505C4E 
 2499      65775C50 
 2499      34505F50 
 2499      726F6A65 
 2500 041c 53656E73 		.ascii	"Sense.cydsn\\CapSense_CSD_WithTuner01.cydsn\000"
 2500      652E6379 
 2500      64736E5C 
 2500      43617053 
 2500      656E7365 
 2501              	.LASF55:
 2502 0447 43617053 		.ascii	"CapSense_CSD_noiseThreshold\000"
 2502      656E7365 
 2502      5F435344 
 2502      5F6E6F69 
 2502      73655468 
 2503              	.LASF14:
 2504 0463 63686172 		.ascii	"char\000"
 2504      00
 2505              	.LASF41:
 2506 0468 43617053 		.ascii	"CapSense_CSD_EnableWidget\000"
 2506      656E7365 
 2506      5F435344 
 2506      5F456E61 
 2506      626C6557 
 2507              	.LASF29:
 2508 0482 43617053 		.ascii	"CapSense_CSD_UpdateEnabledBaselines\000"
 2508      656E7365 
 2508      5F435344 
 2508      5F557064 
 2508      61746545 
 2509              	.LASF45:
 2510 04a6 43617053 		.ascii	"CapSense_CSD_rawFilterData1\000"
 2510      656E7365 
 2510      5F435344 
 2510      5F726177 
 2510      46696C74 
 2511              	.LASF46:
 2512 04c2 43617053 		.ascii	"CapSense_CSD_rawFilterData2\000"
 2512      656E7365 
 2512      5F435344 
 2512      5F726177 
 2512      46696C74 
 2513              	.LASF56:
 2514 04de 43617053 		.ascii	"CapSense_CSD_hysteresis\000"
 2514      656E7365 
 2514      5F435344 
 2514      5F687973 
 2514      74657265 
 2515              	.LASF30:
 2516 04f6 6465626F 		.ascii	"debounceIndex\000"
 2516      756E6365 
 2516      496E6465 
 2516      7800
 2517              	.LASF40:
 2518 0504 43617053 		.ascii	"CapSense_CSD_CheckIsAnyWidgetActive\000"
ARM GAS  C:\Users\ash750\AppData\Local\Temp\ccrQNdQ4.s 			page 81


 2518      656E7365 
 2518      5F435344 
 2518      5F436865 
 2518      636B4973 
 2519              	.LASF36:
 2520 0528 43617053 		.ascii	"CapSense_CSD_CheckIsWidgetActive\000"
 2520      656E7365 
 2520      5F435344 
 2520      5F436865 
 2520      636B4973 
 2521              	.LASF59:
 2522 0549 43617053 		.ascii	"CapSense_CSD_rawDataIndex\000"
 2522      656E7365 
 2522      5F435344 
 2522      5F726177 
 2522      44617461 
 2523              	.LASF50:
 2524 0563 43617053 		.ascii	"CapSense_CSD_sensorBaselineLow\000"
 2524      656E7365 
 2524      5F435344 
 2524      5F73656E 
 2524      736F7242 
 2525              	.LASF26:
 2526 0582 74656D70 		.ascii	"tempRaw\000"
 2526      52617700 
 2527              	.LASF42:
 2528 058a 43617053 		.ascii	"CapSense_CSD_DisableWidget\000"
 2528      656E7365 
 2528      5F435344 
 2528      5F446973 
 2528      61626C65 
 2529              	.LASF52:
 2530 05a5 43617053 		.ascii	"CapSense_CSD_sensorOnMask\000"
 2530      656E7365 
 2530      5F435344 
 2530      5F73656E 
 2530      736F724F 
 2531              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
