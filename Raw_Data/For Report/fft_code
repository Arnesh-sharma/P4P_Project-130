function fft_analysis(filename)
% FFT_ANALYSIS Reads data from a file, performs FFT on each column, and plots the results.
%
% This function reads numeric data from a CSV or text file, handles missing
% values, computes the FFT for each column, and plots the single-sided
% amplitude spectrum with frequency shown in Hz.
%
% Inputs:
%   filename - A string containing the name and path of the data file.
%
% Example:
%   >> fft_analysis('sensor_data.csv');

    % --- 1. Load Data ---
    fprintf('Loading data from %s...\n', filename);

    try
        data = readmatrix(filename);
    catch ME
        fprintf('Error loading file: %s\n', ME.message);
        return;
    end

    [num_rows, num_cols] = size(data);
    fprintf('Data loaded successfully. Rows: %d, Columns: %d (d0 to d%d)\n', ...
        num_rows, num_cols, num_cols - 1);

    % --- 2. Ask for Sampling Frequency ---
    Fs = input('Enter the sampling frequency in Hz (e.g., 1000): ');
    if isempty(Fs) || Fs <= 0
        warning('Invalid or missing sampling frequency. Using Fs = 1 Hz.');
        Fs = 1;
    end

    % --- 3. Process Each Column ---
    for i = 1:num_cols
        column_data = data(:, i);
        x = column_data(~isnan(column_data)); % remove NaNs
        L = length(x);

        if L < 10
            fprintf('Skipping column d%d: Only %d valid data points found.\n', i-1, L);
            continue;
        end

        fprintf('Processing column d%d: %d valid data points.\n', i-1, L);

        % --- 4. FFT Computation ---
        Y = fft(x);
        P2 = abs(Y/L);
        P1 = P2(1:floor(L/2)+1);
        P1(2:end-1) = 2 * P1(2:end-1);

        % Frequency vector in Hz
        f = Fs * (0:(L/2)) / L;

        % --- 5. Plot Results ---
        figure;
        plot(f, P1, 'b-', 'LineWidth', 1.2);
        title(sprintf('Single-Sided Amplitude Spectrum of d%d (N=%d)', i-1, L), 'FontSize', 14);
        xlabel('Frequency (Hz)', 'FontSize', 12);
        ylabel('|P1(f)| (Amplitude)', 'FontSize', 12);
        grid on;

        % Limit to Nyquist frequency
        xlim([0 Fs/2]);

        % Set frequency ticks (every 10 Hz or adaptive)
        tick_spacing = max(10, round(Fs/20)); % dynamic spacing based on Fs
        xticks(0:tick_spacing:Fs/2);

        fprintf('Plot generated for d%d in Figure %d.\n', i-1, i);
    end

    fprintf('All FFT analyses complete.\n');
end
